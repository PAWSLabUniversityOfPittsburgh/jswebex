[{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"1","code":"public class CreateObjectDemo {    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"2","code":"    public static void main(String[] args) {    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"3","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"4","code":"        Point myPoint = new Point(23, 94);    \r\n","comment":"The code before the equal sign are all variable declarations that associate a variable name with an object type. The new keyword is a Java operator that creates the object. The new operator is followed by a call to a constructor, which initializes the new object.  \r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"5","code":"        Rectangle rectOne = new Rectangle(myPoint , 100, 200);    \r\n","comment":"This line of code creates an object of class Rectangle and assigns it to the variable 'rectOne'. myPoint object is used as one of the parameters to specisfy the origin of the rectangle\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"6","code":"        Rectangle rectTwo = new Rectangle(myPoint , 50, 100);    \r\n","comment":"Another object of class Rectangle is created\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"7","code":"      \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"8","code":"        System.out.println(\"Width of rectOne: \" + rectOne.getWidth());    \r\n","comment":"To print the width of rectOne we invoke method getWdith() on the object rectOne and print the result.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"9","code":"        System.out.println(\"Height of rectOne: \" + rectOne.getHeight());    \r\n","comment":"Similar for the height of this rectangle - we call the method getHeight() for it and display the result\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"10","code":"        System.out.println(\"Area of rectOne: \" + rectOne.getArea());    \r\n","comment":"This line prints the area of rectOne\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"11","code":"      \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"12","code":"        rectTwo.move(10, 20);    \r\n","comment":"Unlike three previous methods that we used only to retrieve the data of an object, this method changes the object data. This is a mutator method. It moves rectTwo by modifying the x and y coordinates of its origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"13","code":"        System.out.println(\"X Position of rectTwo: \" + rectTwo.getOrigin().getX());    \r\n","comment":"This method prints the X coordinate of rectTwo's origin. We invoke method getOrigin() on rectTwo() to get an access to the Point object that stores rectTwo's origin and then we invoke getX() method on the retrieved Point object to obtain the X coordinate of the origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"14","code":"        System.out.println(\"Y Position of rectTwo: \" + rectTwo.getOrigin().getY());    \r\n","comment":"Similar to print the Y coordinate of rectTwo's origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"15","code":"    }    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"16","code":"}  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"1","code":"public class Point { \r\n","comment":"The beginning of the Point class. Class definition starts with the access specifier (usually - public), the reserved word \"class\" and name of the class.   The opening curly bracket is followed by the body of a class definition.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"2","code":"    private int x; \r\n","comment":"x is an instance field of class Point. It is declared as integer to store the X coordinates of Point objects.It is declared as private to restrict the direct access from outside the class.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"3","code":"    private int y; \r\n","comment":"another private integer instance filed to store Y coordinate of a point.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"4","code":"\r\n","comment":""},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"5","code":"    public Point(int a, int b) { \r\n","comment":"This is a constructor. Constructor is a special kind of methods.It is being called whenever a new object of this class is created.Constructor's name is always the same as the name of the class.constructor does not have a return type.This constructor has two integer parameters to set the x and y coordinates of Point objects.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"6","code":"       x = a; \r\n","comment":"instance field x gets its value from parameter a\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"7","code":"       y = b; \r\n","comment":"instance field y is assigned with the value of b\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"8","code":"    } \r\n","comment":"end of the constructor\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"9","code":"}\r\n","comment":"end of the class Point\r\n"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"5","code":"                    int n=0; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"6","code":"                    if (n % 2 == 0) \r\n","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the statement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"7","code":"                            System.out.println(\"the number is Even.\");  \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"1","code":"public class Decision_If","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"11","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"5","code":"                  String s1 = \"Hell\"; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"6","code":"                  String s2 = \"Hello\"; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"7","code":"                  String s3 = \"Hello IS17\";\r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"10","code":"                  if (s1.equals(s2)) \r\n","comment":"Use the .equals() method to compare strings for equality.Here, we are comparing s1 and s2 strings. If s1 is equal to s2, the next command will be executed.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"15","code":"                    System.out.println(s1.compareTo(s4));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s1 and s4 are identical. Both are string Hell. So the print out is 0.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"11","code":"                    System.out.println(\"these two are equal!\");\r\n","comment":"However, s1(Hell) is not equal to s2(Hello), this line will never be printed out.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"12","code":"              ","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"8","code":"                  String s4 = \"Hell\";\r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"13","code":"                    System.out.println(s1.compareTo(s2));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s1(Hell) is 1 letter less than (Hello). So the print out is -1.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"9","code":"              ","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"14","code":"                    System.out.println(s3.compareTo(s1));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s3(Hello IS17) has 6 letters more than s1(Hell). So the print out is 6.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"1","code":"public class string_comparison","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"16","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"17","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"1","code":"class MountainBike extends Bicycle {    ","comment":"Java uses the \"extends\" keyword to set the relationship between a child class and a parent class. Here, MountainBike is the child class and Bicycle is the parent class. MountainBike class inherits all the properties of the Bicycle class.  "},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"2","code":"      ...    ","comment":"new fields and methods defining a mountain bike can go here.  "},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"3","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"1","code":"\/\/ by Deitel & Associates, Inc. and Pearson Education, Inc.\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"2","code":"\/\/ Java How to Program, 7\/e\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"3","code":"\/\/ Fig. 4.16: Increment.java\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"4","code":"\/\/ Prefix increment and postfix increment operators.\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"5","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"6","code":"public class Increment \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"7","code":"{\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"8","code":"   public static void main( String args[] )\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"9","code":"   {\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"10","code":"      int c;\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"11","code":"   \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"12","code":"      \/\/ demonstrate postfix increment operator\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"13","code":"      c = 5; \r\n\r\n","comment":"assign 5 to c\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"14","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 5\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"15","code":"      System.out.println( c++ ); \r\n\r\n","comment":"prints 5 then postincrements\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"16","code":"      System.out.println( c );   \r\n\r\n","comment":"prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"17","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"18","code":"      System.out.println(); \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"19","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"20","code":"      \/\/ demonstrate prefix increment operator\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"21","code":"      c = 5; \r\n\r\n","comment":"assign 5 to c\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"22","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 5\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"23","code":"      System.out.println( ++c ); \r\n\r\n","comment":"preincrements then prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"24","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"25","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"26","code":"   } \r\n\r\n","comment":"end main\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"27","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"28","code":"} \r\n","comment":"end class Increment\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"1","code":"public class CreateObjectDemo {    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"2","code":"    public static void main(String[] args) {    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"3","code":"","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"4","code":"        Point myPoint = new Point(23, 94);    \r\n","comment":"The code before the equal sign are all variable declarations that associate a variable name with an object type. The new keyword is a Java operator that creates the object. The new operator is followed by a call to a constructor, which initializes the new object.  \r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"5","code":"        Rectangle rectOne = new Rectangle(myPoint , 100, 200);    \r\n","comment":"This line of code creates an object of class Rectangle and assigns it to the variable 'rectOne'. myPoint object is used as one of the parameters to specisfy the origin of the rectangle\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"6","code":"        Rectangle rectTwo = new Rectangle(myPoint , 50, 100);    \r\n","comment":"Another object of class Rectangle is created\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"7","code":"      \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"8","code":"        System.out.println(\"Width of rectOne: \" + rectOne.getWidth());    \r\n","comment":"To print the width of rectOne we invoke method getWdith() on the object rectOne and print the result.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"9","code":"        System.out.println(\"Height of rectOne: \" + rectOne.getHeight());    \r\n","comment":"Similar for the height of this rectangle - we call the method getHeight() for it and display the result\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"10","code":"        System.out.println(\"Area of rectOne: \" + rectOne.getArea());    \r\n","comment":"This line prints the area of rectOne\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"11","code":"      \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"12","code":"        rectTwo.move(10, 20);    \r\n","comment":"Unlike three previous methods that we used only to retrieve the data of an object, this method changes the object data. This is a mutator method. It moves rectTwo by modifying the x and y coordinates of its origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"13","code":"        System.out.println(\"X Position of rectTwo: \" + rectTwo.getOrigin().getX());    \r\n","comment":"This method prints the X coordinate of rectTwo's origin. We invoke method getOrigin() on rectTwo() to get an access to the Point object that stores rectTwo's origin and then we invoke getX() method on the retrieved Point object to obtain the X coordinate of the origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"14","code":"        System.out.println(\"Y Position of rectTwo: \" + rectTwo.getOrigin().getY());    \r\n","comment":"Similar to print the Y coordinate of rectTwo's origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"15","code":"    }    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"16","code":"}  \r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The while and do-while Statements\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"2","code":"\/\/WhileDemo\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"3","code":"class WhileDemo {\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"4","code":"     public static void main(String[] args){\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"5","code":"          int count = 1;\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"6","code":"          while (count < 11) {\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"7","code":"               System.out.println(\"Count is: \" + count);\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"8","code":"               count++;\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"9","code":"          }\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"10","code":"     }\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"2","code":"\/\/Initializing an Object Rectangle, Returning a Value from a Method\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"3","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"4","code":"public class Rectangle {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"5","code":"    public int width = 0;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"6","code":"    public int height = 0;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"7","code":"    public Point origin;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"8","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"9","code":"    \/\/ four constructors\r\n\r\n","comment":"Each constructor lets you provide initial values for the rectangle's size and width, using both primitive and reference types.\r\n"},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"10","code":"    public Rectangle() {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"11","code":"\torigin = new Point(0, 0);\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"12","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"13","code":"    public Rectangle(Point p) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"14","code":"\torigin = p;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"15","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"16","code":"    public Rectangle(int w, int h) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"17","code":"\torigin = new Point(0, 0);\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"18","code":"\twidth = w;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"19","code":"\theight = h;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"20","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"21","code":"    public Rectangle(Point p, int w, int h) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"22","code":"\torigin = p;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"23","code":"\twidth = w;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"24","code":"\theight = h;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"25","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"26","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"27","code":"    \/\/ a method for moving the rectangle\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"28","code":"    public void move(int x, int y) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"29","code":"\torigin.x = x;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"30","code":"\torigin.y = y;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"31","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"32","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"33","code":"    \/\/ a method for computing the area of the rectangle\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"34","code":"    public int getArea() {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"35","code":"\treturn width * height;\r\n\r\n","comment":"This method returns the integer that the expression width*height evaluates to.\r\n"},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"36","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"37","code":"}\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"2","code":"\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"3","code":"public class Bicycle {\r\n\r\n","comment":"Class definition starts with the access specifier (usually - public), the reserved word \"class\" and name of the class. \r\nThe opening curly bracket is followed by the body of a class definition."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"4","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"5","code":"    \/\/ the Bicycle class has three fields\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"6","code":"    private int cadence;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own cadence.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"7","code":"    private int gear;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own gear.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"8","code":"    private int speed;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own speed.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"9","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"10","code":"    \/\/ the Bicycle class has one constructor\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"11","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {\r\n\r\n","comment":"Constructor definition starts with the access specifier (public), name of the constructor (always the same as the name of the class) and the list of parameters (to initialize the instance fields of newly created objects)."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"12","code":"        gear = startGear;\r\n\r\n","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"13","code":"        cadence = startCadence;\r\n\r\n","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"14","code":"        speed = startSpeed;\r\n\r\n","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"15","code":"    }\r\n\r\n","comment":"end of the constructor. Whenever a new object of class Bicycle is created using this constructor the sequence of statements between the opening and the closing curly brackets is executed."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"16","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"17","code":"    \/\/ the Bicycle class has four methods\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"18","code":"    public void setCadence(int newValue) {\r\n\r\n","comment":"This method changes the current value of cadence to a newValue\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has only one parameter - a new values for cadence"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"19","code":"        cadence = newValue;\r\n\r\n","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"20","code":"    }\r\n\r\n","comment":"end of the method setCadence"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"21","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"22","code":"    public void setGear(int newValue) {\r\n\r\n","comment":"This method changes the current value of gear to a newValue\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has only one parameter - a new values for gear"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"23","code":"        gear = newValue;\r\n\r\n","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"24","code":"    }\r\n\r\n","comment":"end of the method setGear"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"25","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"26","code":"    public void applyBrake(int decrement) {\r\n\r\n","comment":"This method implements braking.\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has one parameter - a speed decrement"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"27","code":"        speed = speed - decrement;\r\n\r\n","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"28","code":"    }\r\n\r\n","comment":"end of the method applyBrake"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"29","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"30","code":"    public void speedUp(int increment) {\r\n\r\n","comment":"This method implements speeding up.\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has one parameter - a speed incremenet"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"31","code":"        speed = speed + increment;\r\n\r\n","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"32","code":"    }\r\n\r\n","comment":"end of the method speedUp"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"33","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"34","code":"}\r\n","comment":"end of the class definition"},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"2","code":"\/\/Initializing an Object\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"3","code":"\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"4","code":"public class Point {\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"5","code":"    public int x = 0;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"6","code":"    public int y = 0;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"7","code":"    \/\/constructor\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"8","code":"    public Point(int a, int b) {\r","comment":"You can recognize a constructor because its declaration uses the same name as the class and it has no return type."},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"9","code":"\tx = a;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"10","code":"\ty = b;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"12","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"1","code":"public class Animal {\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"2","code":"    public String moveMethod() {\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"3","code":"        return \"Unspecified\";\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"4","code":"    }\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"5","code":"}\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"7","code":"public class Bird extends Animal {\r\n\r\n","comment":"Bird class is a child class (a subclass) of class Animal.\r\n"},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"8","code":"    public String moveMethod() {\r\n\r\n","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()\r\n\r\n"},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"9","code":"        return \"Fly\";\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"10","code":"    }\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"1","code":"public class ConstantExample{\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"2","code":"  public static void main(String[] arg) {\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;         \r","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed."},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;  \r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"5","code":"\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD);\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH);\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"8","code":"    \r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"9","code":"  }\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Others","rdf_id":"Substring","ex_name":"DEPRECATED_Substring","line_number":"1","code":"    String a = \"Java is great.\";\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"Substring","ex_name":"DEPRECATED_Substring","line_number":"2","code":"    String b = a.substring(5,7);\r\n","comment":"substring() method returns the sub string between start position 5 and end position 7. Here, the string variable b is initialized with \"is\".\r\n"},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"1","code":"\/\/ by Deitel & Associates, Inc. and Pearson Education, Inc.\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"2","code":"\/\/ Java How to Program, 7\/e\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"3","code":"\/\/ Fig. 4.16: Increment.java\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"4","code":"\/\/ Prefix increment and postfix increment operators.\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"5","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"6","code":"public class Increment \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"7","code":"{\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"8","code":"   public static void main( String args[] )\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"9","code":"   {\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"10","code":"      int c;\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"11","code":"   \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"12","code":"      \/\/ demonstrate postfix increment operator\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"13","code":"      c = 5; \r\n\r\n","comment":"assign 5 to c\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"14","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 5\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"15","code":"      System.out.println( c++ ); \r\n\r\n","comment":"prints 5 then postincrements\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"16","code":"      System.out.println( c );   \r\n\r\n","comment":"prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"17","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"18","code":"      System.out.println(); \r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"19","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"20","code":"      \/\/ demonstrate prefix increment operator\r\n\r\n","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"21","code":"      c = 5; \r\n\r\n","comment":"assign 5 to c\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"22","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 5\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"23","code":"      System.out.println( ++c ); \r\n\r\n","comment":"preincrements then prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"24","code":"      System.out.println( c );  \r\n\r\n","comment":"prints 6\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"25","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"26","code":"   } \r\n\r\n","comment":"end main\r\n"},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"27","code":"","comment":""},{"topic_name":"Variables and Operations","rdf_id":"Increment","ex_name":"DEPRECATED_increment","line_number":"28","code":"} \r\n","comment":"end class Increment\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"1","code":"public class CreateObjectDemo {    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"2","code":"    public static void main(String[] args) {    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"3","code":"","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"4","code":"        Point myPoint = new Point(23, 94);    \r\n","comment":"The code before the equal sign are all variable declarations that associate a variable name with an object type. The new keyword is a Java operator that creates the object. The new operator is followed by a call to a constructor, which initializes the new object.  \r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"5","code":"        Rectangle rectOne = new Rectangle(myPoint , 100, 200);    \r\n","comment":"This line of code creates an object of class Rectangle and assigns it to the variable 'rectOne'. myPoint object is used as one of the parameters to specisfy the origin of the rectangle\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"6","code":"        Rectangle rectTwo = new Rectangle(myPoint , 50, 100);    \r\n","comment":"Another object of class Rectangle is created\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"7","code":"      \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"8","code":"        System.out.println(\"Width of rectOne: \" + rectOne.getWidth());    \r\n","comment":"To print the width of rectOne we invoke method getWdith() on the object rectOne and print the result.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"9","code":"        System.out.println(\"Height of rectOne: \" + rectOne.getHeight());    \r\n","comment":"Similar for the height of this rectangle - we call the method getHeight() for it and display the result\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"10","code":"        System.out.println(\"Area of rectOne: \" + rectOne.getArea());    \r\n","comment":"This line prints the area of rectOne\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"11","code":"      \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"12","code":"        rectTwo.move(10, 20);    \r\n","comment":"Unlike three previous methods that we used only to retrieve the data of an object, this method changes the object data. This is a mutator method. It moves rectTwo by modifying the x and y coordinates of its origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"13","code":"        System.out.println(\"X Position of rectTwo: \" + rectTwo.getOrigin().getX());    \r\n","comment":"This method prints the X coordinate of rectTwo's origin. We invoke method getOrigin() on rectTwo() to get an access to the Point object that stores rectTwo's origin and then we invoke getX() method on the retrieved Point object to obtain the X coordinate of the origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"14","code":"        System.out.println(\"Y Position of rectTwo: \" + rectTwo.getOrigin().getY());    \r\n","comment":"Similar to print the Y coordinate of rectTwo's origin.\r\n"},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"15","code":"    }    \r\n","comment":""},{"topic_name":"Decisions and Boolean Expressions","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"16","code":"}  \r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The while and do-while Statements\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"2","code":"\/\/WhileDemo\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"3","code":"class WhileDemo {\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"4","code":"     public static void main(String[] args){\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"5","code":"          int count = 1;\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"6","code":"          while (count < 11) {\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"7","code":"               System.out.println(\"Count is: \" + count);\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"8","code":"               count++;\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"9","code":"          }\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"10","code":"     }\r\n\r\n","comment":""},{"topic_name":"Loops","rdf_id":"While","ex_name":"DEPRECATED_While","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"2","code":"\/\/Initializing an Object Rectangle, Returning a Value from a Method\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"3","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"4","code":"public class Rectangle {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"5","code":"    public int width = 0;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"6","code":"    public int height = 0;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"7","code":"    public Point origin;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"8","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"9","code":"    \/\/ four constructors\r\n\r\n","comment":"Each constructor lets you provide initial values for the rectangle's size and width, using both primitive and reference types.\r\n"},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"10","code":"    public Rectangle() {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"11","code":"\torigin = new Point(0, 0);\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"12","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"13","code":"    public Rectangle(Point p) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"14","code":"\torigin = p;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"15","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"16","code":"    public Rectangle(int w, int h) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"17","code":"\torigin = new Point(0, 0);\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"18","code":"\twidth = w;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"19","code":"\theight = h;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"20","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"21","code":"    public Rectangle(Point p, int w, int h) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"22","code":"\torigin = p;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"23","code":"\twidth = w;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"24","code":"\theight = h;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"25","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"26","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"27","code":"    \/\/ a method for moving the rectangle\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"28","code":"    public void move(int x, int y) {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"29","code":"\torigin.x = x;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"30","code":"\torigin.y = y;\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"31","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"32","code":"","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"33","code":"    \/\/ a method for computing the area of the rectangle\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"34","code":"    public int getArea() {\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"35","code":"\treturn width * height;\r\n\r\n","comment":"This method returns the integer that the expression width*height evaluates to.\r\n"},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"36","code":"    }\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Rectangle","ex_name":"DEPRECATED_Rectangle","line_number":"37","code":"}\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"2","code":"\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"3","code":"public class Bicycle {\r\n\r\n","comment":"Class definition starts with the access specifier (usually - public), the reserved word \"class\" and name of the class. \r\nThe opening curly bracket is followed by the body of a class definition."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"4","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"5","code":"    \/\/ the Bicycle class has three fields\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"6","code":"    private int cadence;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own cadence.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"7","code":"    private int gear;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own gear.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"8","code":"    private int speed;\r\n\r\n","comment":"instance field definition. Every object of the class Bicycle will have its own speed.\r\nInstance fields should be declared private.  In this case the access to the object's data is granted only through the methods of the public interface. No unexpected modification of the object data is possible."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"9","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"10","code":"    \/\/ the Bicycle class has one constructor\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"11","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {\r\n\r\n","comment":"Constructor definition starts with the access specifier (public), name of the constructor (always the same as the name of the class) and the list of parameters (to initialize the instance fields of newly created objects)."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"12","code":"        gear = startGear;\r\n\r\n","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"13","code":"        cadence = startCadence;\r\n\r\n","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"14","code":"        speed = startSpeed;\r\n\r\n","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"15","code":"    }\r\n\r\n","comment":"end of the constructor. Whenever a new object of class Bicycle is created using this constructor the sequence of statements between the opening and the closing curly brackets is executed."},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"16","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"17","code":"    \/\/ the Bicycle class has four methods\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"18","code":"    public void setCadence(int newValue) {\r\n\r\n","comment":"This method changes the current value of cadence to a newValue\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has only one parameter - a new values for cadence"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"19","code":"        cadence = newValue;\r\n\r\n","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"20","code":"    }\r\n\r\n","comment":"end of the method setCadence"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"21","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"22","code":"    public void setGear(int newValue) {\r\n\r\n","comment":"This method changes the current value of gear to a newValue\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has only one parameter - a new values for gear"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"23","code":"        gear = newValue;\r\n\r\n","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"24","code":"    }\r\n\r\n","comment":"end of the method setGear"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"25","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"26","code":"    public void applyBrake(int decrement) {\r\n\r\n","comment":"This method implements braking.\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has one parameter - a speed decrement"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"27","code":"        speed = speed - decrement;\r\n\r\n","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"28","code":"    }\r\n\r\n","comment":"end of the method applyBrake"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"29","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"30","code":"    public void speedUp(int increment) {\r\n\r\n","comment":"This method implements speeding up.\r\nit is defined as public to provide access to this method from outside of the class.\r\nit is defined void, as it does not return any vale\r\nit has one parameter - a speed incremenet"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"31","code":"        speed = speed + increment;\r\n\r\n","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"32","code":"    }\r\n\r\n","comment":"end of the method speedUp"},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"33","code":"\t\r\n\r\n","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Bicycle","ex_name":"DEPRECATED_Bicycle","line_number":"34","code":"}\r\n","comment":"end of the class definition"},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>> Classes and Objects\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"2","code":"\/\/Initializing an Object\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"3","code":"\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"4","code":"public class Point {\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"5","code":"    public int x = 0;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"6","code":"    public int y = 0;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"7","code":"    \/\/constructor\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"8","code":"    public Point(int a, int b) {\r","comment":"You can recognize a constructor because its declaration uses the same name as the class and it has no return type."},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"9","code":"\tx = a;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"10","code":"\ty = b;\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes and Objects","rdf_id":"Point","ex_name":"DEPRECATED_Point","line_number":"12","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"1","code":"public class Animal {\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"2","code":"    public String moveMethod() {\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"3","code":"        return \"Unspecified\";\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"4","code":"    }\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"5","code":"}\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"7","code":"public class Bird extends Animal {\r\n\r\n","comment":"Bird class is a child class (a subclass) of class Animal.\r\n"},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"8","code":"    public String moveMethod() {\r\n\r\n","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()\r\n\r\n"},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"9","code":"        return \"Fly\";\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"10","code":"    }\r\n\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"Override","ex_name":"DEPRECATED_Override","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"1","code":"public class ConstantExample{\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"2","code":"  public static void main(String[] arg) {\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;         \r","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed."},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;  \r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"5","code":"\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD);\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH);\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"8","code":"    \r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"9","code":"  }\r","comment":""},{"topic_name":"Others","rdf_id":"Constants","ex_name":"DEPRECATED_Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Others","rdf_id":"Substring","ex_name":"DEPRECATED_Substring","line_number":"1","code":"    String a = \"Java is great.\";\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"Substring","ex_name":"DEPRECATED_Substring","line_number":"2","code":"    String b = a.substring(5,7);\r\n","comment":"substring() method returns the sub string between start position 5 and end position 7. Here, the string variable b is initialized with \"is\".\r\n"},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Others","rdf_id":"switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Others","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"1","code":"#include <iostream>","comment":"Include the library for working with streaming data to and from the user"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"2","code":"using namespace std;","comment":"Add a reference to standard namespace that includes variables, types, constants, and functions"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"3","code":"","comment":""},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"4","code":"int main()","comment":"Declare the main function in the project"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"5","code":"{","comment":"Open the body of the function"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"6","code":"    cout << \"Programming is great fun!\";","comment":"Display a message on the screen"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"7","code":"    return 0;","comment":"main() is a function, so it should return a value. We make it 0, or in this case a dummy value"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_simple_cout","ex_name":"Simple cout","line_number":"8","code":"}","comment":"Close the function body"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"1","code":"#include <iostream>","comment":"Include the library for working with streaming data to and from the user"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"2","code":"using namespace std;","comment":"Add a reference to standard namespace that includes variables, types, constants, and functions"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"3","code":"","comment":""},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"4","code":"int main()","comment":"Declare the main function"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"5","code":"{","comment":"Open the body of the function"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"6","code":"    int number;","comment":"Declare an integer variable named number"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"7","code":"","comment":""},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"8","code":"    number = 5;","comment":"Assign the value of 5 to the variable number"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"9","code":"    cout << \"The value of number is \" << \"number\" << endl;","comment":"Output the newly assigned value of the variable"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"10","code":"    number = 7;","comment":"Reassign the value of number to 7"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"11","code":"    cout << \"Now the value of number is \" << number << endl;","comment":"Output the new value of the variable number"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"12","code":"","comment":""},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"13","code":"    return 0;","comment":"main() is a function, so it should return a value. We make it 0, or in this case a dummy value"},{"topic_name":"Lecture 1","rdf_id":"c_ch2_using_variables","ex_name":"Using Variables","line_number":"14","code":"}","comment":"Close the body of the function"},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"1","code":"\/* This is our first program *\/","comment":"This is a comment. Comments are written not for computers but for humans. The computer will ignore everything between \/* and *\/. Humans need comments to understand the program."},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"2","code":"","comment":"Empty lines separating parts of the program make it more readable"},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"3","code":"#include <stdio.h>","comment":"#include is a command which tells the compiler that the standard input \/ output  library will be used. Thus printf will be recognized as a standard output function"},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"4","code":"","comment":"Empty lines separating parts of the program make it more readable"},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"5","code":"void main()","comment":"Execution of a C program always begins at the main() function. Every C program must have one (only one) main() function."},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"6","code":"{","comment":"The open brace ({) marks the beginning of the function body, which is one or more program statements which perform some task"},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"7","code":"    printf(\"Hello, World!  \");","comment":"This statement is a function call to the printf function in the C Standard I\/O Library. It displays the message which is the argument to the function. The    denotes the newline. We can use printf because we told the compiler to use Standard I\/O Library."},{"topic_name":"Unit 1","rdf_id":"helloworld.c","ex_name":"IS12:: helloworld.c (1.1)","line_number":"8","code":"}","comment":"The closing brace (}) marks the end of the function body"},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"1","code":"public class CreateObjectDemo {    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"2","code":"    public static void main(String[] args) {    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"3","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"4","code":"        Point myPoint = new Point(23, 94);    \r\n","comment":"The code before the equal sign are all variable declarations that associate a variable name with an object type. The new keyword is a Java operator that creates the object. The new operator is followed by a call to a constructor, which initializes the new object.  \r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"5","code":"        Rectangle rectOne = new Rectangle(myPoint , 100, 200);    \r\n","comment":"This line of code creates an object of class Rectangle and assigns it to the variable 'rectOne'. myPoint object is used as one of the parameters to specisfy the origin of the rectangle\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"6","code":"        Rectangle rectTwo = new Rectangle(myPoint , 50, 100);    \r\n","comment":"Another object of class Rectangle is created\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"7","code":"      \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"8","code":"        System.out.println(\"Width of rectOne: \" + rectOne.getWidth());    \r\n","comment":"To print the width of rectOne we invoke method getWdith() on the object rectOne and print the result.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"9","code":"        System.out.println(\"Height of rectOne: \" + rectOne.getHeight());    \r\n","comment":"Similar for the height of this rectangle - we call the method getHeight() for it and display the result\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"10","code":"        System.out.println(\"Area of rectOne: \" + rectOne.getArea());    \r\n","comment":"This line prints the area of rectOne\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"11","code":"      \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"12","code":"        rectTwo.move(10, 20);    \r\n","comment":"Unlike three previous methods that we used only to retrieve the data of an object, this method changes the object data. This is a mutator method. It moves rectTwo by modifying the x and y coordinates of its origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"13","code":"        System.out.println(\"X Position of rectTwo: \" + rectTwo.getOrigin().getX());    \r\n","comment":"This method prints the X coordinate of rectTwo's origin. We invoke method getOrigin() on rectTwo() to get an access to the Point object that stores rectTwo's origin and then we invoke getX() method on the retrieved Point object to obtain the X coordinate of the origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"14","code":"        System.out.println(\"Y Position of rectTwo: \" + rectTwo.getOrigin().getY());    \r\n","comment":"Similar to print the Y coordinate of rectTwo's origin.\r\n"},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"15","code":"    }    \r\n","comment":""},{"topic_name":"Objects","rdf_id":"CreateObjectDemo_v2","ex_name":"Object Creation and Method Calls","line_number":"16","code":"}  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Objects","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"1","code":"public class Point { \r\n","comment":"The beginning of the Point class. Class definition starts with the access specifier (usually - public), the reserved word \"class\" and name of the class.   The opening curly bracket is followed by the body of a class definition.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"2","code":"    private int x; \r\n","comment":"x is an instance field of class Point. It is declared as integer to store the X coordinates of Point objects.It is declared as private to restrict the direct access from outside the class.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"3","code":"    private int y; \r\n","comment":"another private integer instance filed to store Y coordinate of a point.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"4","code":"\r\n","comment":""},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"5","code":"    public Point(int a, int b) { \r\n","comment":"This is a constructor. Constructor is a special kind of methods.It is being called whenever a new object of this class is created.Constructor's name is always the same as the name of the class.constructor does not have a return type.This constructor has two integer parameters to set the x and y coordinates of Point objects.\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"6","code":"       x = a; \r\n","comment":"instance field x gets its value from parameter a\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"7","code":"       y = b; \r\n","comment":"instance field y is assigned with the value of b\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"8","code":"    } \r\n","comment":"end of the constructor\r\n"},{"topic_name":"Objects","rdf_id":"Point_v2","ex_name":"Point","line_number":"9","code":"}\r\n","comment":"end of the class Point\r\n"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Objects","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"5","code":"                    int n=0; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"6","code":"                    if (n % 2 == 0) \r\n","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the statement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"7","code":"                            System.out.println(\"the number is Even.\");  \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"1","code":"public class Decision_If","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"Decision_If_v2","ex_name":"Decision If","line_number":"11","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"5","code":"                  String s1 = \"Hell\"; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"6","code":"                  String s2 = \"Hello\"; \r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"7","code":"                  String s3 = \"Hello IS17\";\r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"10","code":"                  if (s1.equals(s2)) \r\n","comment":"Use the .equals() method to compare strings for equality.Here, we are comparing s1 and s2 strings. If s1 is equal to s2, the next command will be executed.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"15","code":"                    System.out.println(s1.compareTo(s4));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s1 and s4 are identical. Both are string Hell. So the print out is 0.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"11","code":"                    System.out.println(\"these two are equal!\");\r\n","comment":"However, s1(Hell) is not equal to s2(Hello), this line will never be printed out.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"12","code":"              ","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"8","code":"                  String s4 = \"Hell\";\r\n","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"13","code":"                    System.out.println(s1.compareTo(s2));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s1(Hell) is 1 letter less than (Hello). So the print out is -1.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"9","code":"              ","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"14","code":"                    System.out.println(s3.compareTo(s1));\r\n","comment":"The compareTo method compares strings is dictionary order.  Here, s3(Hello IS17) has 6 letters more than s1(Hell). So the print out is 6.\r\n"},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"1","code":"public class string_comparison","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"16","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"string_comparison_v2","ex_name":"String Comparison","line_number":"17","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"If-Else","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"1","code":"class MountainBike extends Bicycle {    ","comment":"Java uses the \"extends\" keyword to set the relationship between a child class and a parent class. Here, MountainBike is the child class and Bicycle is the parent class. MountainBike class inherits all the properties of the Bicycle class.  "},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"2","code":"      ...    ","comment":"new fields and methods defining a mountain bike can go here.  "},{"topic_name":"Inheritance","rdf_id":"inheritance1_v2","ex_name":"Inheritance","line_number":"3","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Variables","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Variables","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Variables","rdf_id":"ObjectEquality","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Demo Unit","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.1","ex_name":"Hello World","line_number":"1","code":"print (\"Hello World!\")","comment":"This is a simple statement which prints out the string 'Hello World!'. Python 3 syntax suggests that everything that needs to be printed out should be enclosed in the round parenthesis '()'."},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"1","code":"print ('Hello World!')","comment":"One way to print a string is to enclose the string inside single quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"2","code":"print (\"Hello World!\") ","comment":"Another way to print out a string is to enclose the string inside double quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"3","code":"print ('''Hello World!''')","comment":"One more way to printing out strings is to put it between Three-Single Quotes. This is used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"4","code":"print (\"\"\"Hello World!\"\"\") ","comment":"Strings can also be printed with Three-Double Quotes. Similar to the previous example, this is also used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"1","code":"a = 10","comment":"An integer"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"2","code":"b = 10.20","comment":"A floating point number"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"3","code":"c = \"Harry\"","comment":"A string enclosed in quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"4","code":"d = True","comment":"A Boolean value (True or False)"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"6","code":"print (a,b,c,d)","comment":"Prints our the values of variables a, b, c and d separating the values by a blank. With the current value of variables it will print 10 10.2 Harry True"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"1","code":"x, y, z = 10, 'Harry', True","comment":"Integer '10' is assigned to variable x, the string 'Harry' is assigned to variable y and the boolean value 'True' is assigned to variable z"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"2","code":"a = b = c = d = 10","comment":"Integer value '10' is assigned to variables a,b,c and d simultaneously in just one statement"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"4","code":"print (z)","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"5","code":"print (c)","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"1","code":"num1 = 1","comment":"A positive integer '1' is assigned to the variable num1. After this statement, num1 variable is updated with the value '1'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"2","code":"num2 = -100","comment":"A negative integer '-100' is assigned to the variable num2. After this statement, num2 variable is updated with the value '-100'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"3","code":"num3 = 20.30","comment":"A positive float '20.30' is assigned to the variable num3. After this statement, num3 variable is updated with the value '20.30'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"4","code":"num4 = -0.002","comment":"A negative float '-0.002' is assigned to the variable num4. After this statement, num4 variable is updated with the value '-0.002'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"6","code":"print (num1)","comment":"Printing out the variable 'num1'. The resultant output as seen by you will be '1'."},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"1","code":"string1 = \"This is an example Srting\"","comment":"Assigning string type to the variable 'string1'"},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"3","code":"print (string1)","comment":"Prints out the complete string"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"1","code":"# Example: Printing primitive data with print","comment":"This is a comment. A string that starts with a hash symbol will be ignored by the interpreter and could be used for comments. In this case, it explains the nature of the file content"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"3","code":"print(\"Hello, World!\")","comment":"To print a string of symbols, use print function and provide the string delimited by double quotes inside brackets. This line of code prints Hello, World! when interpreted"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"4","code":"print(\"Here are integers:\", 10, 99)","comment":"Print function can have several papameters separated by comas. It prints the values of all its parameters one by one, left to right, separating them by a space. This line will print Here are integers 10 99"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"5","code":"print(\"Here are floats: \", 3.1415, 0.001)","comment":"This print function has three parameters. First is string \"Here are floats\", second is a floating point literal 3.1414 and third is another floating point literal 0.001. It prints the values of these three parameters one by one, separating by a blank. The result will be Here are floats:  3.1415 0.001"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"6","code":"print(\"Here are strings: \", \"IS12\", \"hello!\")","comment":"This print function has three parameters, all are strings. It will print all of them left to right separating by a blank. The result will be Here are strings:  IS12 hello!"},{"topic_name":"Variables","rdf_id":"printing_py","ex_name":"printing.py","line_number":"7","code":"","comment":""},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"1","code":"# Simple Calculations Example","comment":"This is a comment. It is ignored by the interpreter"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"2","code":"","comment":"This empty line makes the program more readable"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"3","code":"print(\"Let's calculate!\")","comment":""},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"4","code":"print(\"1234 + 4321 = \", 1234 + 4321)","comment":"This print function has two parameters. One is a string and one is an addition expression (1234+4321). The string is printed as is, the expression is evaluated to 5555 and printed. What you will see printed is 1234 + 4321 =  5555"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"5","code":"print(\"2 * 3.1415 = \", 2 * 3.1415)","comment":"This print function has two parameters. One is a string and one is a multiplication expression (2 * 3.1415). The string is printed as is, the expression is evaluated  and printed. What you will see printed is 2 * 3.1415 =   6.2830"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"6","code":"print(\"5 \/ 2 = \", 5 \/ 2) ","comment":"Single slash in a regular division. The result of evaluating a regular division is always a floating point value, even if it operates with integers. In this case the result is 2.5. What will be printed is 5 \/ 2 =  2.5"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"7","code":"print(\"5 \/\/ 2 = \", 5 \/\/ 2)\t\t\t\t","comment":"Double slash in an integer division that only can work with two integers. The result of evaluating an integer division is always integer. It ignores the remainder. In this case the result is 2. What will be printed is 5 \/\/ 2 =  2"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"8","code":"print(\"5 % 2 = \", 5 % 2)","comment":"Percent sign indicates the remainder operation that only can work with two integers. The result of evaluating a remainder is also integer. In this case the result is 1. What will be printed is 5 % 2 =  1"},{"topic_name":"Variables","rdf_id":"calculate.py","ex_name":"Simple Calculations","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"4","code":"print (a + b)","comment":"Adding a and b"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"5","code":"print (a - b)","comment":"Subtracting a and b"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"6","code":"print (a * b)","comment":"Multiplying a and b"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"7","code":"print (a \/ b)","comment":"Dividing a and b"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"8","code":"print (a ** b)","comment":"Performing a exponent b"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"9","code":"print (a % b)","comment":"a modulus b operation"},{"topic_name":"Variables","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"10","code":"print (a\/\/b)","comment":"Floor dividing a and b"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"4","code":"a += b","comment":"This operation is equivalent to 'a = a + b'"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"5","code":"a -= b","comment":"This operation is equivalent to 'a = a - b'"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"6","code":"a *= b","comment":"This operation is equivalent to 'a = a * b'"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"7","code":"a \/= b","comment":"This operation is equivalent to 'a = a \/ b'"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"8","code":"a %= b","comment":"This operation is equivalent to 'a = a % b'"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"9","code":"a **= b","comment":"This operation is equivalent to 'a = a ** b' (a exponent b)"},{"topic_name":"Variables","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"10","code":"a \/\/= b","comment":"This operation is equivalent to 'a = a \/\/ b'"},{"topic_name":"Simple Input","rdf_id":"pyt10.9","ex_name":"Simple Input","line_number":"1","code":"num1 = input('Enter a number: ')","comment":"This statement takes input from the user and then it stores it in the variable 'num1'"},{"topic_name":"Simple Input","rdf_id":"pyt10.9","ex_name":"Simple Input","line_number":"2","code":"num2 = input('Enter another number: ')","comment":"This statement takes another input from the user and then it stores it in the variable 'num2'"},{"topic_name":"Simple Input","rdf_id":"pyt10.9","ex_name":"Simple Input","line_number":"3","code":"sum = int(num1) + int(num2)","comment":"This statement first converts the input variables into integers and then adds the two integers"},{"topic_name":"Simple Input","rdf_id":"pyt10.9","ex_name":"Simple Input","line_number":"4","code":"","comment":""},{"topic_name":"Simple Input","rdf_id":"pyt10.9","ex_name":"Simple Input","line_number":"5","code":"print('Addition of the two numbers is ', sum)","comment":"This statement prints out the sum"},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"1","code":"#Simple Input Program","comment":""},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"2","code":"","comment":""},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"3","code":"applicant = input(\"Enter the applicant's name: \")","comment":"This statement takes applicant's name as input from the user"},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"4","code":"interviewer = input(\"Enter the interviewer's name: \")","comment":"This statement takes interviewer's name as input from the user"},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"5","code":"time = input(\"Enter the appointment time: \")","comment":"This statement takes time of the interview as input from the user"},{"topic_name":"Simple Input","rdf_id":"pyt10.10","ex_name":"Simple Input 2","line_number":"6","code":"print(interviewer, \"will interview\", applicant, \"at\", time)","comment":"This simply prints a one-line summary of the details taken from the user in the above statements. Note the text in double quotations is string where as the text without quotations is the variable that is called (printing a variable's value)"},{"topic_name":"If Statement","rdf_id":"pyt3.5","ex_name":"IF Statement","line_number":"1","code":"number = 10","comment":"In this statement integer '10' is assigned to the variable 'number'"},{"topic_name":"If Statement","rdf_id":"pyt3.5","ex_name":"IF Statement","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.5","ex_name":"IF Statement","line_number":"3","code":"if number > 5:","comment":"This statement checks if the variable 'number' has a value greater than '5'. If this condition is true, it will go inside the loop to execute the statement. If the condition is not true it will skip the IF statement."},{"topic_name":"If Statement","rdf_id":"pyt3.5","ex_name":"IF Statement","line_number":"4","code":"    print(True)","comment":"If the above condition is true, it will print out the boolean 'True'. In this case it will print out True.\nNote: A boolean value is not a string and hence it should not be inside quotation marks."},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"1","code":"# This is a simple IF...ELSE statement example","comment":"This is a comment line which simply explains the function of the code below"},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"3","code":"number = 5","comment":"This is a simple variable assignment statement. Here, integer '5' is assigned to the variable 'number'"},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"4","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"5","code":"if number < 0:","comment":"This statement checks if the value of 'number' is less than 0. If this condition is true, it will go inside the 'if' statement."},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"6","code":"    print(number , 'is a negative integer')","comment":"If the condition of the above statement was true, it would execute this statement. But since the condition is not true (number is not less than 0), it will skip the IF statement.\nNote: In this statement a comma (,) is used to combine an integer variable with the string while printing. "},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"7","code":"else:","comment":"Since it skiped the IF statement, it will by default execute the ELSE statement."},{"topic_name":"If Statement","rdf_id":"pyt3.6","ex_name":"IF...ELSE Statement","line_number":"8","code":"    print(number , 'is a positive integer')","comment":"In this statement a comma (,) is used to merge an integer variable with the string while printing. "},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"1","code":"dice_score = 5","comment":"Assigning the value 5 to the variable 'dice_score'"},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"3","code":"if dice_score < 6:","comment":"This is the outer 'If' condition. It checks if the value of 'dice_score' is less than 6. If this condition is true, the code will go the the inner 'If...else' conditions. In this case this condition is true since the value of dice_score is 5 which is less than 6."},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"4","code":"    if dice_score == 1:","comment":"This inner 'If' statement checks if the value is 1. If it is not true, it will jump to the next condition. In this case it is not true since the value of dice_score is 5"},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"5","code":"        print(\"Your score is 1. Please roll again.\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"6","code":"    elif dice_score == 2:","comment":"This inner 'If' statement checks if the value is 2. If it is not true, it will jump to the next condition. In this case it is not true since the value of dice_score is 5"},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"7","code":"        print(\"Your score is 2. Please roll again.\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"8","code":"    elif dice_score == 3:","comment":"This inner 'If' statement checks if the value is 3. If it is not true, it will jump to the next condition. In this case it is not true since the value of dice_score is 5"},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"9","code":"        print(\"Your score is 3. Please roll again.\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"10","code":"    elif dice_score == 4:","comment":"This inner 'If' statement checks if the value is 4. If it is not true, it will jump to the next condition. In this case it is not true since the value of dice_score is 5"},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"11","code":"        print(\"Your score is 4. Please roll again.\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"12","code":"    else:","comment":"Since all the above conditions are not true it will execute this 'else' statement by default."},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"13","code":"        print(\"Your score is 5. Please roll again.\")","comment":"Since the else statement is executed, it will print out this string."},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"14","code":"elif dice_score == 6:","comment":"Imagine if the outer 'If' condition was not true, the code would have jumped to this 'elif' condition."},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"15","code":"    print(\"It is a perfect dice score. Congratulations!\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"16","code":"else:","comment":"Again Imagine if none of the above conditions were true, the code would jump to this 'else' condition. "},{"topic_name":"If Statement","rdf_id":"pyt3.8","ex_name":"Nested IF...ELSE Statement","line_number":"17","code":"    print(\"It is an invalid dice score. The value should be between 1 and 6\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"1","code":"number = 6","comment":"The variable 'number' is assigned a value '6'"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"3","code":"if number < 10:","comment":"Condition 1: Check if the number is less than 10? In this case it is true so the code will execute inside this 'if' Statement"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"4","code":"    if number % 2 == 0:","comment":"Condition 2: Given that condition 1 is true, check if the number is perfectly divisible by 2? Yes, number 6 is perfectly divisibly by 2. So this condition is true aswel."},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"5","code":"        if number % 3 == 0:","comment":"Condition 3: Given that the condition 1 and 2 ae true, check if the number is also perfectly divisible by 3? Yes, number 6 is perfectly divisibly by 3. So this condition is true aswel"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"6","code":"            print(\"The selected number is 6\")","comment":"Since all the above conditions were true, it will execute this print statement."},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"7","code":"        else:","comment":"If condition 3 was not true, the code would have jumped to this 'else' statement"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"8","code":"            print(\"The selected number is not perfectly divisible by 3\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"9","code":"    else:","comment":"If condition 2 was not true, the code would have jumped to this 'else' statement"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"10","code":"        print(\"The selected number is not perfectly divisible by 2\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"11","code":"else:","comment":"If condition 1 was not true, the code would have jumped to this 'else' statement"},{"topic_name":"If Statement","rdf_id":"pyt3.10","ex_name":"Nested IF...ELSE Statement 2","line_number":"12","code":"    print(\"The number is greater than 10\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"1","code":"#Calculating Weekly Wages of the employees","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"3","code":"totalHours = 45","comment":"In this statement, integer '45' is assigned to the variable 'totalHours'. This variable represents the number of hours an employee has worked in a given week."},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"4","code":"hourlyWage = 20","comment":"Here, integer '20' is assigned to the variable 'hourlyWage'. This is to take in the Hourly Wages of an employee as input"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"5","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"6","code":"if totalHours <= 40:","comment":"This statement checks if the value of 'totalHours' is less than or equal to 40. In other words, it checks if the employee has worked for 40 hours or less?"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"7","code":"    totalWages = hourlyWage*totalHours","comment":"If employee has worked for 40 hours or less, total wages would be a product of wages-per-hour and number of hours worked in that week"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"8","code":"else:","comment":"If the employee has worked for more than 40 hours in that week then this 'else' statement will be executed"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"9","code":"    overtime = totalHours - 40","comment":"First it needs to check how many hours above the standard 40 hours has employee worked. This is because the employee will be paid the normal hourly wages upto 40 hours and 1.5 times the hourly wages for hours above 40 hours. The number of hours worked above 40 hours will be stored in the variable 'overtime'"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"10","code":"    totalWages = hourlyWage*40 + (1.5*hourlyWage)*overtime","comment":"The total wages is calculated by adding the wages for upto 40 hours and the wages for overtime hours"},{"topic_name":"If Statement","rdf_id":"pyt10.1","ex_name":"IF...ELSE Statement 2","line_number":"11","code":"print(totalWages)","comment":"This statement simply prints the total wages of an employee as output"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"1","code":"#ELIF (Else...If) Statement to find out the Letter Grade of a student from a score","comment":"In case of more than one conditions, repeatedly increasing indentation with an 'if' statement as the 'else' block can be annoying and distracting. One solution to this is to use 'elif' statement. It is a short version of Else...IF"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"2","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"3","code":"score = 82","comment":"Assigning the integer '82' to the variable 'score'. In other words, taking in the student's score out of 100 as an input"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"4","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"5","code":"if score >= 90:","comment":"First condition is to check if the score is above 90"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"6","code":"    letter = 'A'","comment":"If the score is above 90, the letter grade 'A' is assigned to the student"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"7","code":"elif score >= 80:","comment":"else if the score is more than or equal to 80"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"8","code":"    letter = 'B'","comment":"the letter grade 'B' is assigned to the student"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"9","code":"elif score >= 70:","comment":"else if the score is more than or equal to 70"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"10","code":"    letter = 'C'","comment":"the letter grade 'C' is assigned to the student"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"11","code":"elif score >= 60:","comment":"else if the score is more than or equal to 60"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"12","code":"    letter = 'D'","comment":"the letter grade 'D' is assigned to the student"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"13","code":"else:","comment":"If none of the above conditions are true then the score of the student is less than 60"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"14","code":"    letter = 'F'","comment":"If the score is less than 60, then the letter grade 'F' is assigned to the student"},{"topic_name":"If Statement","rdf_id":"pyt10.2","ex_name":"ELIF (ELSE IF) Statement","line_number":"15","code":"print(letter)","comment":"Print out the letter grade"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"1","code":"#Let user enter the number between 1 and 20, check if the number is valid, then check if the nunber is even or odd and give the square of the number as output to user","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"2","code":"enter_number = int(input(\"Please enter a number between 1 and 20: \"))","comment":"This statement takes an input from the users. int() is added to ensure that the input is treated as a integer, not a string"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"3","code":"","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"4","code":"if enter_number >= 1:  ","comment":"This conditional statement ensures the input is more than or equal to '1'"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"5","code":"    if enter_number <= 20:","comment":"If the above condition is true, it will check for 2nd condition. This conditional statement ensures the input is less than or equal to '20'"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"6","code":"        print(\"You have entered a valid number\")","comment":"If the above 2 conditions are true, the user is notified that the entered number is valid"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"7","code":"        if enter_number % 2 == 0:","comment":"3rd condition checks if the number is even. This is done by checking if the remainder is '0' when the number is divided by 2"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"8","code":"            print(\"Your number is even\")","comment":"If the remainder is '0', then the number is even"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"9","code":"            print(enter_number , 'is completely divisible by 2')","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"10","code":"        elif enter_number % 2 == 1:","comment":"If the number is divided by '0' and the remainder is '1' then the number is odd"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"11","code":"            print(\"Your number is odd\")","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"12","code":"            print(enter_number , 'is not divisible by 2')","comment":""},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"13","code":"    else:","comment":"If the number is not less than or equal to 20, the code will jump to this 'else' statement"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"14","code":"        print(\"You've entered an invalid number\")","comment":"User will be notified that the entered number is not valid"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"15","code":"else:","comment":"If the number is not more than or equal to 1, the code will jump to this 'else' statement"},{"topic_name":"If Statement","rdf_id":"pyt10.4","ex_name":"Complex IF...ELSE Statement","line_number":"16","code":"    print(\"You've entered an invalid number\")","comment":"User will be notified that the entered number is not valid"},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"1","code":"temperature = 20","comment":"Assigning the value 20 to the variable 'temperature'"},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"2","code":"","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"3","code":"if temperature < 0:","comment":"This statement checks if the condition (temperature is less than 0) is true. The value of temperature is 20 so this statement is not true."},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"4","code":"    print(\"It is extremely cold\")","comment":"In case if the above if statement was true, it would execute this statement and print out the following string."},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"5","code":"elif temperature >= 0 and temperature < 20:","comment":"'elif' is a short for 'Else If'. This code jumps to this condition if the above 'if' condition was not true. This statement checks if the condition (temperature is more than or equal to 0 but less than 20) is true or not. The value of temperature is 20 so this statement is not true."},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"6","code":"    print(\"It is very cold\")","comment":"Since the above 'elif' condition was false, this print statement will not be executed"},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"7","code":"elif temperature >= 20 and temperature < 30:","comment":"Since the above 'elif' statement was not true, the code jumps to this condition. This statement checks if the condition (temperature is more than or equal to 20 and less than 30) is true or not. The value of temperature is 20 so this statement is true."},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"8","code":"    print(\"It is just about fine\")","comment":"Since the above 'elif' statement is true, this print statement will be executed and it will print out the string 'It is just about fine'"},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"9","code":"else:","comment":"The above statement was true so it will not jump to 'else' statement. But just imagine if all the above conditions were not true then this 'else' statement would be executed"},{"topic_name":"Logical Operators","rdf_id":"pyt3.7","ex_name":"IF...ELSE Statement (Multiple Conditions)","line_number":"10","code":"    print(\"It is unpleasant\")","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"1","code":"a = 1","comment":"Assigning integer '1' to the variable 'a'"},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"2","code":"b = 2","comment":"Assigning integer '2' to the variable 'b'"},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"3","code":"","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"4","code":"if a == 1 and b == 2:","comment":"This statement checks if 'a' is equal to '1' as well as if 'b' i equal to '2'. Here the 'and' operator denotes that both the conditions should be true"},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"5","code":"    print(True)","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"6","code":"","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"7","code":"if a == 0 or b == 2:","comment":"This statement checks if 'a' is equal to '0' or if 'b' is equal to '2'. Here the 'or' operator denotes that any one condition should be true. It is fine if both the conditions are true. But it is not fine if none of the conditions are true"},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"8","code":"    print(True)","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"9","code":"","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"10","code":"if not (a == 1 and b == 3):","comment":"This is a slightly tricky operator usage. The condition inside the round parenthesis states that both a=1 and b=3 shoud be satisfied due to the use of 'and' operator. But since both the conditions are not satisfied, the condition inside the parenthesis is False. But then there is a 'not' operator outside of the parenthesis which reverses the case Hence the entire statement is summarized as \"Check if the conditions inside the parenthesis is not true\""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"11","code":"    print(True)","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"12","code":"","comment":""},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"13","code":"if a != 0 and b != 3:","comment":"This statement is read as follows:\nCheck if 'a' is not equal to '0' and 'b' is not equal to '3'. Here due to the use of 'and' operator, both the conditions should be satisfied"},{"topic_name":"Logical Operators","rdf_id":"pyt10.3","ex_name":"Logical Operators","line_number":"14","code":"    print(True)","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"1","code":"a = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"2","code":"","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"3","code":"for a in range(0,5):","comment":"This statement loops for 5 times from the value of a = 0 to a = 4"},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"4","code":"    print (a)","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"1","code":"i = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"2","code":"","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"3","code":"while i < 2:","comment":"Loops from i=0 to i=1 (Outer Loop)"},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"4","code":"   j = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"5","code":"   while j < 2:","comment":"Loops from j=0 to j=1 (Inner Loop)"},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"6","code":"      print (j)","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"7","code":"      j = j + 1","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"8","code":"   i = i + 1","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.7","ex_name":"While Loop Statement","line_number":"1","code":"a = 0","comment":"A variable used inside a While Loop condition has to be defined by assigning it a base value. A base value is from where the While Loop will start iterating. In this case variable 'a' is assigned the integer '0'. Hence this While Loop will start from a = 0."},{"topic_name":"Loops","rdf_id":"pyt4.7","ex_name":"While Loop Statement","line_number":"2","code":"    ","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.7","ex_name":"While Loop Statement","line_number":"3","code":"while (a < 5):","comment":"As mentioned above, this loop will start from a =0 and will iterate till 'a' is less than 5 (a = 4)"},{"topic_name":"Loops","rdf_id":"pyt4.7","ex_name":"While Loop Statement","line_number":"4","code":"    print (\"Current Number is:\", a)","comment":"In each iteration, it will print the current number. For example, in the first iteration, it will print out the following:\n'Current Number is: 0'"},{"topic_name":"Loops","rdf_id":"pyt4.7","ex_name":"While Loop Statement","line_number":"5","code":"    a = a + 1","comment":"This is a very important step in a while loop. The variable that is iterated upon, should always be incremented. If the variable is not incremented, the value of 'a' will be same forever and the while loop condition will never be met and hence it will go into an infinite loop (keep looping forever)."},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"1","code":"temperature = 0","comment":"Temperature is set to 0 (Integer 0 is assigned to the variabe temperature)"},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"2","code":"    ","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"3","code":"while (temperature < 60):","comment":"This While Loop condition will iterate from temperature = 0 to temperature < 60"},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"4","code":"    if temperature < 30:","comment":"Inside the while loop, there is an If condition. This If condition checks if the temperature is less than 30"},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"5","code":"        print(\"It is Cold!\")","comment":"If the temperature is less than 30, it will print the following statement"},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"6","code":"    else:","comment":"If the temperature is more than 30,then..."},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"7","code":"        print(\"It is Hot!\")","comment":"If the temperature is more than 30,then it will print the following"},{"topic_name":"Loops","rdf_id":"pyt4.8","ex_name":"While Loop Statement 2","line_number":"8","code":"    temperature += 10","comment":"Here the temperature is incremented by 10"},{"topic_name":"Output Formatting","rdf_id":"pyt10.11","ex_name":"Output Formatting","line_number":"1","code":"#Simple Output Formatting Example","comment":""},{"topic_name":"Output Formatting","rdf_id":"pyt10.11","ex_name":"Output Formatting","line_number":"2","code":"","comment":""},{"topic_name":"Output Formatting","rdf_id":"pyt10.11","ex_name":"Output Formatting","line_number":"3","code":"print(\"User's Full Name is %s %s\" %(\"John\", \"Adams\"))","comment":"This statement formats the output. You can see the formatting characters  '%s' inside of the string. Then after the end of the sting, the '%' sign says that we are formatting the string so it will look for '%' signs in the string. Then we have a tuple at the end which contans two string values - 'John' and 'Adams' which we are passing to it. So in the first '%s' sign, the string 'John' will be passed and in the second '%s' sign, the string 'Adams' will be passed. The output you will see on running this code is \"User's Full Name is John Adams\""},{"topic_name":"Output Formatting","rdf_id":"pyt10.12","ex_name":"Output Formatting 2","line_number":"1","code":"#Output formatting (String and Decimal Values)","comment":""},{"topic_name":"Output Formatting","rdf_id":"pyt10.12","ex_name":"Output Formatting 2","line_number":"2","code":"","comment":""},{"topic_name":"Output Formatting","rdf_id":"pyt10.12","ex_name":"Output Formatting 2","line_number":"3","code":"print(\"His name is %s and his age is %d\" %(\"Terry\", 22))","comment":"This is similar to the previous example. Here the formatting character '%s' is used for passing a string while the character '%d' is used for passing a decimal value. The output we get on running this code is \"His name is Terry and his age is 22\""},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"1","code":"#Bacis Function","comment":"A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing."},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"2","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"3","code":"def test_function():","comment":"This is how a function is defined. Function begin with the keyword 'def'. Here the function 'test_function' is defined. It is followed by empty parenthesis '()' which denotes that no arguments were pased to this function"},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"4","code":"    print('This is a test function')","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"5","code":"    print('This function does not take in any argument')","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"6","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.5","ex_name":"Functions Introduction","line_number":"7","code":"test_function()","comment":"This is how a function is called. A function can be simply called by typing the name of the function and then the round parenthesis. Once a function is called, everything within the function is executed. In this case the 2 print statements will be executed"},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"1","code":"#Functions with Arguments","comment":"This example showcases the use of arguments "},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"2","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"3","code":"def square(number):","comment":"A function named 'square' is defined which takes in the argument 'number'. Later in this example when '4' is passed as the argument, the value '4' is assigned to the variable 'number'"},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"4","code":"    print('The entered number is ', number)","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"5","code":"    print('Square of ', number , 'is', number*number)","comment":"This statement prints the square of the number"},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"6","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.6","ex_name":"Functions with Arguments","line_number":"7","code":"square(4)","comment":"Here, the function 'square' is called and the integer '4' is passed as the argument "},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"1","code":"def attendance(number):","comment":"Defining the function 'attendance' which takes in the argument 'number'. Here 'number' is the percent of students present in a class for example."},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"2","code":"    if number == 0:","comment":"Checking for the condition number=0 (none of the student were present)"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"3","code":"        print(\"None of the Student came for the lecture\")","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"4","code":"    elif number < 0:","comment":"Checking for another condition where the number is less than zero. This is an invalid input since the number of students cannot be less than 0"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"5","code":"        print(\"Invalid number\")","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"6","code":"    else:","comment":"If none of the above conditions are true...check for the following..."},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"7","code":"        if number > 100:","comment":"Is the number greater than 100? This number is out of range since a class cannot have more than 100% students."},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"8","code":"            print(\"Out of range\")","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"9","code":"        elif number >70:","comment":"If not, is he number greater than 70?"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"10","code":"            print(\"High Attendance\")","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"11","code":"        else:","comment":"If none of the above conditions is true, then the number is between 1 to 70."},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"12","code":"            print(\"Low Attendance\")","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"13","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"14","code":"attendance(-1)","comment":"The function 'attendace' is called by passing the number '-1'"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"15","code":"attendance(20)","comment":"The function 'attendace' is called by passing the number '20'"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"16","code":"attendance(80)","comment":"The function 'attendace' is called by passing the number '80'"},{"topic_name":"Functions","rdf_id":"pyt10.7","ex_name":"Functions Example 1","line_number":"17","code":"attendance(1000)","comment":"The function 'attendace' is called by passing the number '1000'"},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"1","code":"#Function to output the Fibonacci Sequence","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"2","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"3","code":"def fib(n):","comment":"Defining the function 'fib' which takes an argument 'n'"},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"4","code":"    a, b = 0, 1","comment":"In this statement, integer '0' is assigned to variable 'a' and integer '1' is assigned to variable 'b'"},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"5","code":"    while a < n:","comment":"Loop till 'a' is less than the input number 'n'"},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"6","code":"        print(a)","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"7","code":"        a, b = b, a+b","comment":"Update the variable values to continue the sequence. Here the value of 'b' is assigned to the variable 'a' and the value of 'a+b' is assigned to the variable 'b'"},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"8","code":"","comment":""},{"topic_name":"Functions","rdf_id":"pyt10.8","ex_name":"Functions Example 2","line_number":"9","code":"fib(50)","comment":"the function 'fib' is called by passing in the argument '50'. Hence the output will be a Fibonacci Sequence '0, 1, 1, 2, 3, 5, 8, 13, 21, 34'. The last number in the sequence will be less than 50"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"1","code":"list1 = ['abc', 'def', 100, 50000, True]","comment":"Defining list1 with 5 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"2","code":"list2 = [1, 2, 3, 4]","comment":"Defining list2 with 4 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"3","code":"list3 = [\"a\", \"b\", \"c\", \"d\"]","comment":"Defining list3 with 4 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"4","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"5","code":"print (list1)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"3","code":"print (a[2])","comment":"Printing the element at index 2 of list a (Here, it is the 3rd element of the list since list index always starts from 0)"},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"4","code":"print (a[3])","comment":"Printing the element at index 3 of list a (Here, it is the 4th element of the list since list index always starts from 0)"},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"3","code":"a[1] = 'z'","comment":"Index 1 (element 2) currently contains the string 'b'. But after this command, it is replaced by the string 'z'"},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"4","code":"print (a)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"3","code":"a.append('e')","comment":"This command adds the string element 'e' to the end of the list"},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"4","code":"print (a)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"1","code":"a = [1,2,3]","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"2","code":"b = [4,5,6]","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"3","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"4","code":"c = a+b","comment":"This command adds two lists and combines it into a single summed up list"},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"5","code":"print (c)","comment":""},{"topic_name":"Lists","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"1","code":"list1 = [ 123, 'test' , 0.200, -100, True ]    ","comment":"Defining a list containing 5 elements and assigning it to a variable named list1"},{"topic_name":"Lists","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"2","code":"list2 = [ \"apples\", \"oranges\" , \"banana\"]","comment":"Defining a list containing 3 elements and assigning it to a variable named list2"},{"topic_name":"Lists","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"3","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"4","code":"print (list2)","comment":"Printing out the variable 'list2'"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"1","code":"a = 'Hello World'","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"3","code":"print (a[:3])","comment":"Prints the string 'Hello World' from beginning till the element number 3"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"4","code":"print (a[6:])","comment":"Prints the string 'Hello World' from element number 6 till the end"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"5","code":"print (a[2:4])","comment":"Prints the string 'Hello World' from element number 2 till the element number 4"},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"1","code":"a = 'Hello'","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"3","code":"print (a + ' World!')","comment":"adding the strings 'Hello' and 'World!'"},{"topic_name":"Strings","rdf_id":"pyt6.4","ex_name":"Escape Characters","line_number":"1","code":"print ('This Line \\n\\n New Line')","comment":"the characters '\\n' denotes a new line"},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"1","code":"#Dictionary Basics","comment":"Dictionaries work on key-value pairs. Each key is separated from its value by a colon ':', the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.\n\nKeys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples."},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"2","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"3","code":"dictionary1 = {'name': 'harry','age':14, 'gender': 'male'}","comment":"Declaring a dictionary 'dictionary1' with 3 key-value pairs. The keys in this dictionary are 'name', 'age' and 'gender'"},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"4","code":"dictionary2 = {'name': 'sal','age':20, 'gender': 'female'}","comment":"Similar to above, we declare a dictionary 'dictionary2' with 3 key-value pairs. The keys in this dictionary are 'name', 'age' and 'gender'"},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"5","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.13","ex_name":"Dictionary Basics","line_number":"6","code":"print(dictionary1,dictionary2)","comment":"printing out both the dictionaries"},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"1","code":"#Accessing Dictionary Elements","comment":"This example teaches how to access dictionary elements"},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"2","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"3","code":"dictionary1 = {'name': 'harry','age':14, 'gender': 'male'}","comment":"Defining a dictionary with 3 key-value pairs"},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"4","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"5","code":"print(dictionary1[\"name\"])","comment":"Printing out the value of the key 'name' from the dictionary 'dictionary1'"},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"6","code":"print(dictionary1[\"age\"])","comment":"Printing out the value of the key 'age' from the dictionary 'dictionary1'"},{"topic_name":"Dictionary","rdf_id":"pyt10.14","ex_name":"Accessing Dictionary Elements","line_number":"7","code":"print(dictionary1[\"gender\"])","comment":"Printing out the value of the key 'gender' from the dictionary 'dictionary1'"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"1","code":"#Accessing and modifying Dictionary Elements","comment":"This example deals with adding elements as well as modifying elements of a dictionary"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"2","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"3","code":"dict = {\"Name\": \"Terry\", \"score1\": 80}","comment":"Defining a dictionary with 3 key-value pairs"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"4","code":"dict[\"score1\"] = dict[\"score1\"] + 10","comment":"This statement deals with modifying the value of one of the element. The value of the key 'score1' was added by 10"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"5","code":"dict[\"score2\"] = 92","comment":"This statement adds a new element to the dictionary whose key is 'score2' and value is '92'"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"6","code":"","comment":""},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"7","code":"print(dict[\"score2\"])","comment":"Print the value of the element 'score2'"},{"topic_name":"Dictionary","rdf_id":"pyt10.15","ex_name":"Adding and Modifying Dictionary Elements","line_number":"8","code":"print(len(dict))","comment":"This statement prints the lendth of the dictionary. Length of a dictionary simply means number of key-value pairs present in a dictionary. In this case after adding one additional element in the above statement, we now have 3 elements. So the length of the dictionary is 3"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"1","code":"def modify(number):","comment":"defining a function called 'modify' which takes in an integer argument 'number'"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"2","code":"    number = 10","comment":"Assigning the value '10' to the variable 'number'. Note that th variabe 'number' is the local variable and its scope is only confined to this function. What we do here is modify the value of the variable 'number' instead of the using the one that is passed as the argument"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"3","code":"    print(\"Number in modify function is:\", number)","comment":"Printing out the number in the modify function"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"4","code":"","comment":""},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"5","code":"def main():","comment":"Defining the main function"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"6","code":"    number = 5","comment":"defining the variable 'number'. This is not same as the number variable defined above. Again this variable's scope is only confined to this function and hence it is an example of a local variable."},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"7","code":"    modify(number)","comment":"now we cll the modify function within the main function and passing the value of number as '5'."},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"8","code":"    print(\"In main function, number is still:\", number)","comment":"In the main function the value of variable 'number' is still '5'"},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"9","code":" ","comment":""},{"topic_name":"Values and references","rdf_id":"pyt10.19","ex_name":"References Basics","line_number":"10","code":"main()","comment":"calling the main function"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"1","code":"def try_to_change_list_contents(the_list):","comment":"Defining the function 'try_to_change_list_contents' and passing in the argument 'the_list' which will of the type list"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"2","code":"    print('got', the_list)","comment":"printing out the list"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"3","code":"    the_list.append('four')","comment":"Here, we append the string value 'four' to the list"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"4","code":"    print('changed to', the_list)","comment":"printing out the updated list"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"5","code":"","comment":""},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"6","code":"outer_list = ['one', 'two', 'three']","comment":"Defining a list outside the function called 'outer_list' with 3 elements"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"7","code":"","comment":""},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"8","code":"print('before, outer_list =', outer_list)","comment":"printing out the list which is the list before modification"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"9","code":"try_to_change_list_contents(outer_list)","comment":"then passing the above list as argument to the defined function 'try_to_change_list_contents'"},{"topic_name":"Values and references","rdf_id":"pytt10.24","ex_name":"References with Lists","line_number":"10","code":"print('after, outer_list =', outer_list)","comment":"and then printing the list after modification from outside of the function to see if the original list contents are modified."},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"1","code":"def modify(string1):","comment":"defining the function 'modify' and passing in a string parameter"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"2","code":"    string1 = string1.replace(\"2\", \"3\")","comment":"replacing one character in the string that was passed in the function"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"3","code":"    return string1","comment":""},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"4","code":"","comment":""},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"5","code":"def main():","comment":"Main function definition"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"6","code":"    outer_string = \"I have visited 2 countries.\"","comment":"defining a variable 'outer_string' and assigning a string value to it"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"7","code":"    print(outer_string)","comment":"printing out the variable"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"8","code":"    modify(outer_string)","comment":"calling the function 'modify' and passing in the string 'outer_string'. Note that we pass the string to the function as a parameter (argument) but we do not save the value returned by the 'modify' function into the main function anywhere"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"9","code":"    print(outer_string)","comment":"printing out the 'out_string'. Here the value of the variable 'out_string' will be the same"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"10","code":"    outer_string = modify(outer_string)","comment":"Now we pass the same variable 'out_string' to the 'modify' function but we also save the return value into the same variable, thus updating its value"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"11","code":"    print(outer_string)","comment":"printing out the updated string value"},{"topic_name":"Values and references","rdf_id":"pytt10.25","ex_name":"References - Values","line_number":"12","code":"main()","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"1","code":"def str_to_int(var):","comment":"defining a function 'str_to_int' which converts an integer with the type string to an int type. Here we pass the argument that takes an integer with string type. For example \"123\". Here '123' is enclosed in doubl quotes which suggest that it is a string type"},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"2","code":"   try:","comment":"The try blocks tries to execute the code within it"},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"3","code":"      return int(var)","comment":"Here we return the converted value from str to int"},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"4","code":"   except ValueError:","comment":"If the value passed in the argument 'var' does not contain numbers, then it will raise an exception (error)"},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"5","code":"      print(\"The argument does not contain numbers\")","comment":"In python we have the facility to pass a custom message as an error"},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"6","code":"","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.20","ex_name":"Exceptions Basics","line_number":"7","code":"str_to_int(\"xyz\")","comment":"calling the function 'str_to_int'"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"1","code":"def print_number(n):","comment":"Defining a function 'print_number' and passing in the interger argument 'n'"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"2","code":"    print(n)","comment":"printing out the value of 'n'"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"3","code":"","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"4","code":"the_list = (1, 2, 3, 4, 5)","comment":"Creating a list containing 5 integer elements"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"5","code":"for i in range(10):","comment":"a for loop that iterates 10 times"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"6","code":"    try:","comment":"the try block tries to print elements of the lists if they exist at a given index in the list"},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"7","code":"        print_number(the_list[i])","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"8","code":"    except:","comment":"There are 5 elements in the list and the for loop runs for 10 iterations. So, from iteration numer 6 onwards the try block will not find elements at the given index. This statement means that if there are no elements at the index that we are searching then we manually pass an integer argument by calling the function definition. Here instead of raising an error, we customized the fail-safe."},{"topic_name":"Exceptions","rdf_id":"pyt10.21","ex_name":"Exceptions 2","line_number":"9","code":"        print_number(0)","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"1","code":"loop = 1","comment":"Assigning value '1' to the variable 'loop'"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"2","code":"while loop == 1:","comment":"While loop will iterate till the condition 'loop = 1' is true"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"3","code":"    try:","comment":"try block tries to get input values from the user"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"4","code":"        a = input('Enter a number to subtract from > ')","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"5","code":"        b = input('Enter the number to subtract > ')","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"6","code":"        print(int(a) - int(b))","comment":"if the input are numbers, then the print block will print out the difference between the 2 numbers"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"7","code":"    except NameError:","comment":"If the input values are string values, the print function will nt be able to print the difference and hence this will raise an exception"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"8","code":"        print(\"\\nYou cannot subtract a letter\")","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"9","code":"        continue","comment":""},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"10","code":"    try:","comment":"This try block tries to get another input from user to see if user wants to repeat the experiment"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"11","code":"        loop = input('Press 1 to try again > ')","comment":"If the user enters '1', it will repeat the experiment."},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"12","code":"    except NameError:","comment":"Else it will raise a NameError exception"},{"topic_name":"Exceptions","rdf_id":"pyt10.24","ex_name":"Exceptions 3","line_number":"13","code":"        loop = 0","comment":"And then the loop variable is assigned the value '0'. This will stop the while loop from iterating"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"1","code":"f = open(\"test.txt\",\"r\") ","comment":"opens file with name of 'test.txt'"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"2","code":"print(f.read(1))","comment":"This statement reads specific number of characters from the mentioned file. Here '1' is passed as a parameter value into the read method. This means that it will read only one character from the mentioned file."},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"3","code":"print(f.read())","comment":"As above, it will read the number of characters specified. Here, nothing is mentioned within the parenthesis, hence it will read all the characters from the mentioned file"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"4","code":"print(f.readline(2))","comment":"This is the statement which will read the number of lines from a given file. Here 2 is passed as a parameter to the 'readline' method hence it will read 2 lines from the mentioned text file"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"5","code":"","comment":""},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"6","code":"myList = []","comment":"Creating an empty list named 'myList'"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"7","code":"for line in f:","comment":"for loop iterates for each line in f (the mentioned text file)"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"8","code":"    myList.append(line)","comment":"and then it appends that line into the 'myList' as an element"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"9","code":"print(myList)","comment":"this statement simply prints out the entire list"},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"10","code":"","comment":""},{"topic_name":"File handling","rdf_id":"pyt10.22","ex_name":"Reading from a text file","line_number":"11","code":"f.close()","comment":"This statement closes the connection to the file"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"1","code":"f = open(\"test.txt\",\"w\")","comment":"opens file with name of \"test.txt\" Here we give 2 arguments. The first as we know specifies the name of the text file. The second argument specifies the mode of writing. 'w' stands for write. When we open the text file using the mode 'w' it erases the existing data and writes the new data that we specify"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"2","code":"f.write(\"This is the first Line\")","comment":"This statement writes the following string into the text file"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"3","code":"f.write(\"This is the second line\")","comment":"Writing another line into the text file"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"4","code":"f.close()","comment":"Once we have written all the required lines into the text file, we close the connection to the text file"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"5","code":"","comment":""},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"6","code":"f = open(\"test.txt\",\"a\") ","comment":"opens file with name of \"test.txt\". Here the second argument we specified is 'a' which stands for append. This means that it does not delete the existing data when the new data is written but it appends the new data at the end of the file"},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"7","code":"f.write(\"Yet another line\")","comment":""},{"topic_name":"File handling","rdf_id":"pyt10.23","ex_name":"Writing to a text file","line_number":"8","code":"f.close()","comment":"Finally when we are done appending the new data, we close the connection to the file"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"1","code":"class calculator(object):","comment":"This statement defines a class called 'calculator'. The object is a default argument passed to it to tell that the class can be instantiated"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"2","code":"    def __init__ (self):","comment":"this is the class constructor. A constructor always has a default argument 'self'. In fact, every function definition always has 'self' as the its default argument\/parameter. The constructor contains all the basic statements that needs to be initiated when the class is called"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"3","code":"        self.current = 0","comment":"Here the variable 'current' is the local variable and is initiated with the value '0'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"4","code":"    def add(self, amount):","comment":"We now define a class called 'add'. This class takes in an additional argument called 'amount' and we will pass an integer as amount while instantiating the class."},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"5","code":"        self.current += amount","comment":"Adding the value of amount to the current value"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"6","code":"        return self.current","comment":"returning the current value"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"7","code":"    def subtract(self, amount):","comment":"Another function definition called 'subtract' which is meant to subtract the amount from the current value"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"8","code":"        self.current -= amount","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"9","code":"        return self.current","comment":"returning the value of 'current' variable"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"10","code":"    def getCurrent(self):","comment":"defining a function called 'getCurrent'. The purpose of this function is to get the current value at any time in the program"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"11","code":"        return self.current","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"12","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"13","code":"a = calculator()","comment":"The calculator class instance is passed on to the variable 'a'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"14","code":"print(a.add(5))","comment":"Addiing the number '5' to the current value. Initially the value of current is '0' and hence this will return the value '5' (0+5 = 5) "},{"topic_name":"Classes and objects","rdf_id":"pyt10.16","ex_name":"Class Definition - Calculator","line_number":"15","code":"print(a.subtract(2))","comment":"Now the value of current is 5. Here we subtract 2 from the current value by calling the subtract function in the class 'calculator'. This will return the value 3 (5-2 = 3)"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"1","code":"class Customer(object):","comment":"Defining a class 'Customer'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"2","code":"    def __init__(self, name, balance=0.0):","comment":"Setting up a constructor taking in 'name' and 'balance'. Here balance is set to '0.0' as its default value"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"3","code":"        self.name = name","comment":"Defining a local variable 'name' and assigning the value of name that was passed in as the argument to the function"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"4","code":"        self.balance = balance","comment":"Defining a local variable 'balance' and assigning the value of balance. Here balance will be assigned the value '0.0' initially"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"5","code":"    def withdraw(self, amount):","comment":"Defining the function 'withdraw' which takes in the argument 'amount'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"6","code":"        if amount > self.balance:","comment":"here we run a simple conditional statement to check if the amount to be withdrawn is more than the amount in the bank"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"7","code":"            raise RuntimeError('Amount greater than available balance.')","comment":"If yes, we will raise an exception with the custom message saying the amount you want to withdraw is greater than the amount available in your bank account"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"8","code":"        self.balance -= amount","comment":"if the amount to bewithdrawn is less than the amount available in bank, then we subtract the amount from his current balance"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"9","code":"        return self.name+' has '+ str(self.balance)","comment":"returning his updated balance"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"10","code":"    def deposit(self, amount):","comment":"another function called 'deposit' which takes in an additional argument called 'amount'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"11","code":"        self.balance += amount","comment":"Adding the amount deposited to the current balance"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"12","code":"        return self.name+' has '+ str(self.balance)","comment":"returning his updated balance"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"13","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"14","code":"a = Customer('Tom')","comment":"Instantiating the class by passing 'Tom' as the name"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"15","code":"print(a.deposit(5000))","comment":"depositing the amount '5000' into Tom'sbank account. This will return '5000.0'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.17","ex_name":"Class Definition - Bank Account","line_number":"16","code":"print(a.withdraw(1000))","comment":"Withdrawing the amount '1000' from Tom's bank account. This will return '4000.0' as his updated balance"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"1","code":"class Parent:","comment":"define 'Parent' class"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"2","code":"   parentAttr = 100","comment":"assigning value '100' to the 'parent' variable"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"3","code":"   def __init__(self):","comment":"A constructor definition"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"4","code":"      print(\"Calling parent constructor\")","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"5","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"6","code":"   def parentMethod(self):","comment":"defining a function called 'parentMethod'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"7","code":"      print('Calling parent method')","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"8","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"9","code":"   def setAttr(self, attr):","comment":"defining another function called 'setAttr'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"10","code":"      Parent.parentAttr = attr","comment":"assigning the value of attr (which was passed as an argument) to the local variable parentAttr"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"11","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"12","code":"   def getAttr(self):","comment":"defining another function 'getAttr'"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"13","code":"      print(\"Parent attribute :\", Parent.parentAttr)","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"15","code":"class Child(Parent): # define child class","comment":"Now we define a 'Child' class. Here we pass 'Parent' as an argument. This is the core concept of inheritance. Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name.The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent."},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"16","code":"   def __init__(self):","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"17","code":"      print(\"Calling child constructor\")","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"18","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"19","code":"   def childMethod(self):","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"20","code":"      print('Calling child method')","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"21","code":"","comment":""},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"22","code":"c = Child()","comment":"Instantiating the Child class"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"23","code":"c.childMethod()","comment":"child calls its method"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"24","code":"c.parentMethod()","comment":"calls parent's method"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"25","code":"c.setAttr(200)","comment":"again call parent's method"},{"topic_name":"Classes and objects","rdf_id":"pyt10.18","ex_name":"Classes - Inheritance","line_number":"26","code":"c.getAttr()","comment":"once again call parent's method"},{"topic_name":"Variables","rdf_id":"py_1","ex_name":"HelloWorld","line_number":"1","code":"print \"Hello World\"","comment":"Prints 'Hello World' in the console"},{"topic_name":"Variables","rdf_id":"py_1.2","ex_name":"DifferentWaystoPrint","line_number":"1","code":"print 'Hello World!'","comment":"Printing with Single Quotes"},{"topic_name":"Variables","rdf_id":"py_1.2","ex_name":"DifferentWaystoPrint","line_number":"2","code":"print \"Hello World!\"","comment":"Printing with Double Quotes"},{"topic_name":"Variables","rdf_id":"py_1.2","ex_name":"DifferentWaystoPrint","line_number":"3","code":"print '''Hello World!'''","comment":"Printing with Three Single Quotes"},{"topic_name":"Variables","rdf_id":"py_1.2","ex_name":"DifferentWaystoPrint","line_number":"4","code":"print \"\"\"Hello World!\"\"\"","comment":"Printing with Three Double Quotes"},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"1","code":"a = 10           ","comment":"An integer"},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"2","code":"b = 10.20","comment":"A floating point"},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"3","code":"c = \"Harry\"","comment":"A string"},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"4","code":"d = True","comment":"A Boolean value"},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"6","code":"","comment":""},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"7","code":"print c","comment":""},{"topic_name":"Variables","rdf_id":"py_1.3","ex_name":"VariableAssignment","line_number":"8","code":"print d","comment":""},{"topic_name":"t1","rdf_id":"py_1","ex_name":"HelloWorld","line_number":"1","code":"print \"Hello World\"","comment":"Prints 'Hello World' in the console"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"3","code":"","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"4","code":"print (a + b)","comment":"Adding a and b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"5","code":"print (a - b)","comment":"Subtracting a and b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"6","code":"print (a * b)","comment":"Multiplying a and b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"7","code":"print (a \/ b)","comment":"Dividing a and b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"8","code":"print (a ** b)","comment":"Performing a exponent b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"9","code":"print (a % b)","comment":"a modulus b operation"},{"topic_name":"Basic Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"10","code":"print (a\/\/b)","comment":"Floor dividing a and b"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"3","code":"","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"4","code":"print (a == b)","comment":"Is a equal to b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"5","code":"print (a != b)","comment":"Is a not equal to b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"6","code":"print (a > b)","comment":"Is a greater than b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"7","code":"print (a < b)","comment":"Is a less than b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"8","code":"print (a >= b)","comment":"Is a greater than or equal to b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"9","code":"print (a <= b)","comment":"Is a less than or equal to b? Result is a boolean value True or False"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"3","code":"","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"4","code":"a += b","comment":"This operation is equivalent to 'a = a + b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"5","code":"a -= b","comment":"This operation is equivalent to 'a = a - b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"6","code":"a *= b","comment":"This operation is equivalent to 'a = a * b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"7","code":"a \/= b","comment":"This operation is equivalent to 'a = a \/ b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"8","code":"a %= b","comment":"This operation is equivalent to 'a = a % b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"9","code":"a **= b","comment":"This operation is equivalent to 'a = a ** b' (a exponent b)"},{"topic_name":"Basic Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"10","code":"a \/\/= b","comment":"This operation is equivalent to 'a = a \/\/ b'"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"1","code":"a = 10101010","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"2","code":"b = 00001111","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"3","code":"","comment":""},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"4","code":"print (a&b)","comment":"Performs Binary AND Operation"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"5","code":"print (a|b)","comment":"Performs Binary OR Operation"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"6","code":"print (a^b)","comment":"Performs Binary XOR Operation"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"7","code":"print (~a)","comment":"Performs Binary Ones Complement"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"8","code":"print (a>>1)","comment":"Performs Binary Right Shift"},{"topic_name":"Basic Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"9","code":"print (a<<1)","comment":"Performs Binary Left Shift"},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"1","code":"a = 5","comment":"Assigning integer 5 to the variable 'a'"},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"2","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"3","code":"if a == 5:","comment":"Check if the value of a is 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"4","code":"    print True","comment":"if the condition is True, print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"2","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"3","code":"if a == 5:","comment":"Check if 'a' is equal to 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"4","code":"    print True","comment":"If yes, print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"5","code":"else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"6","code":"    print False","comment":"Else, print 'False'"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"2","code":"b = 2","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"3","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"4","code":"if a == 5:","comment":"First condition: to check if a is equal to 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"5","code":"    if b == 2:","comment":"Second Condition: to check if b is equal to 2"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"6","code":"        print True","comment":"If both the conditions are true, then print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"7","code":"    else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"8","code":"        print False","comment":"Print False if the inner condition is False"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"9","code":"else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"10","code":"    print False","comment":"Print False if the outer condition is False"},{"topic_name":"Numbers","rdf_id":"pyt5.1","ex_name":"Number Basics","line_number":"1","code":"var1 = 20","comment":"positive integer"},{"topic_name":"Numbers","rdf_id":"pyt5.1","ex_name":"Number Basics","line_number":"2","code":"var2 = -1000","comment":"negative integer"},{"topic_name":"Numbers","rdf_id":"pyt5.1","ex_name":"Number Basics","line_number":"3","code":"","comment":""},{"topic_name":"Numbers","rdf_id":"pyt5.1","ex_name":"Number Basics","line_number":"4","code":"print var1, var2","comment":""},{"topic_name":"Numbers","rdf_id":"pyt5.2","ex_name":"Variable to Integer","line_number":"1","code":"a = '20'","comment":"a string '20' is assigned to the variable 20"},{"topic_name":"Numbers","rdf_id":"pyt5.2","ex_name":"Variable to Integer","line_number":"2","code":"b = int(a)","comment":"converting string into an integer"},{"topic_name":"Numbers","rdf_id":"pyt5.2","ex_name":"Variable to Integer","line_number":"3","code":"","comment":""},{"topic_name":"Numbers","rdf_id":"pyt5.2","ex_name":"Variable to Integer","line_number":"4","code":"print (b + 10)","comment":"adding the integers and printing it out on the console"},{"topic_name":"Strings","rdf_id":"pyt6.1","ex_name":"Strings Basics","line_number":"1","code":"var1 = 'Hello World!'","comment":"Assigning the string 'Hello World!' to the variable var1"},{"topic_name":"Strings","rdf_id":"pyt6.1","ex_name":"Strings Basics","line_number":"2","code":"var2 = \"Python Programming\"","comment":"Assigning the string 'Python Programming' to the variable var2"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"1","code":"a = 'Hello World'","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"3","code":"print (a[:3])","comment":"Prints the string 'Hello World' from beginning till the element number 3"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"4","code":"print (a[6:])","comment":"Prints the string 'Hello World' from element number 6 till the end"},{"topic_name":"Strings","rdf_id":"pyt6.2","ex_name":"Sub-Strings","line_number":"5","code":"print (a[2:4])","comment":"Prints the string 'Hello World' from element number 2 till the element number 4"},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"1","code":"a = 'Hello'","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"pyt6.3","ex_name":"Adding Strings","line_number":"3","code":"print (a + ' World!')","comment":"adding the strings 'Hello' and 'World!'"},{"topic_name":"Strings","rdf_id":"pyt6.4","ex_name":"Escape Characters","line_number":"1","code":"print ('This Line \\n\\n New Line')","comment":"the characters '\\n' denotes a new line"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"1","code":"list1 = ['abc', 'def', 100, 50000, True]","comment":"Defining list1 with 5 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"2","code":"list2 = [1, 2, 3, 4]","comment":"Defining list2 with 4 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"3","code":"list3 = [\"a\", \"b\", \"c\", \"d\"]","comment":"Defining list3 with 4 elements"},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"4","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.1","ex_name":"List Basics","line_number":"5","code":"print (list1)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"3","code":"print (a[2])","comment":"Printing the element at index 2 of list a (Here, it is the 3rd element of the list since list index always starts from 0)"},{"topic_name":"Lists","rdf_id":"pyt7.2","ex_name":"Accessing the List Index","line_number":"4","code":"print (a[3])","comment":"Printing the element at index 3 of list a (Here, it is the 4th element of the list since list index always starts from 0)"},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"3","code":"a[1] = 'z'","comment":"Index 1 (element 2) currently contains the string 'b'. But after this command, it is replaced by the string 'z'"},{"topic_name":"Lists","rdf_id":"pyt7.3","ex_name":"Replacing list elements","line_number":"4","code":"print (a)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"1","code":"a = ['a','b','c','d']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"3","code":"a.append('e')","comment":"This command adds the string element 'e' to the end of the list"},{"topic_name":"Lists","rdf_id":"pyt7.4","ex_name":"Appending Values to List","line_number":"4","code":"print (a)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"1","code":"a = ['a','b','c','d','e']","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"2","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"3","code":"a.pop()","comment":"Since no argument is passed within the round paranthesis, it will by default remove the last element of the list"},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"4","code":"a.pop(0)","comment":"This command will remove the first element fromt the list since '0' is passed as the argument in the paranthesis which satands for 0th index"},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"5","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.5","ex_name":"Removing list elements","line_number":"6","code":"print (a)","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"1","code":"a = [1,2,3]","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"2","code":"b = [4,5,6]","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"3","code":"","comment":""},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"4","code":"c = a+b","comment":"This command adds two lists and combines it into a single summed up list"},{"topic_name":"Lists","rdf_id":"pyt7.6","ex_name":"Addiing Lists","line_number":"5","code":"print (c)","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.1","ex_name":"Tuple Basics","line_number":"1","code":"tuple1 = ('physics', 'chemistry', 1997, 2000)","comment":"Defining a tuple with 4 elements"},{"topic_name":"Tuples","rdf_id":"pyt8.1","ex_name":"Tuple Basics","line_number":"2","code":"tuple2 = (1, 2, 3, 4, 5)","comment":"Defining a tuple with 5 elements"},{"topic_name":"Tuples","rdf_id":"pyt8.1","ex_name":"Tuple Basics","line_number":"3","code":"tuple3 = (\"a\", \"b\", \"c\")","comment":"Defining a tuple with 3 elements"},{"topic_name":"Tuples","rdf_id":"pyt8.1","ex_name":"Tuple Basics","line_number":"4","code":"","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.1","ex_name":"Tuple Basics","line_number":"5","code":"print (tuple1)","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.2","ex_name":"Accessing Tuple Index","line_number":"1","code":"a = ('a','b','c','d')","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.2","ex_name":"Accessing Tuple Index","line_number":"2","code":"","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.2","ex_name":"Accessing Tuple Index","line_number":"3","code":"print (a[2])","comment":"Accessing the index 2 element of the tuple (3rd element since the tuple index always starts from 0)"},{"topic_name":"Tuples","rdf_id":"pyt8.2","ex_name":"Accessing Tuple Index","line_number":"4","code":"print (a[3])","comment":"Accessing the index 3 element of the tuple (4th element since the tuple index always starts from 0)"},{"topic_name":"Tuples","rdf_id":"pyt8.3","ex_name":"Adding Tuples","line_number":"1","code":"a = (1,2,3)","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.3","ex_name":"Adding Tuples","line_number":"2","code":"b = (4,5,6)","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.3","ex_name":"Adding Tuples","line_number":"3","code":"","comment":""},{"topic_name":"Tuples","rdf_id":"pyt8.3","ex_name":"Adding Tuples","line_number":"4","code":"c = a+b","comment":"Adding Tuple a and Tuple b"},{"topic_name":"Tuples","rdf_id":"pyt8.3","ex_name":"Adding Tuples","line_number":"5","code":"print (c)","comment":""},{"topic_name":"Dictionaries","rdf_id":"pyt9.1","ex_name":"Dictionary Basics","line_number":"1","code":"dict1 = {'Name': 'Zara', 'Age': 7, 'Class': 'First'};","comment":"Defining the dictionary 'dict1' with 3 key-value pairs"},{"topic_name":"Dictionaries","rdf_id":"pyt9.1","ex_name":"Dictionary Basics","line_number":"2","code":"","comment":""},{"topic_name":"Dictionaries","rdf_id":"pyt9.1","ex_name":"Dictionary Basics","line_number":"3","code":"print (dict1)","comment":""},{"topic_name":"Dictionaries","rdf_id":"pyt9.2","ex_name":"Accessing Dictionary Elements","line_number":"1","code":"dict1 = {'Name': 'Zara', 'Age': 7, 'Class': 'First'};","comment":"defining a dictionary with 3 Key-Value pairs"},{"topic_name":"Dictionaries","rdf_id":"pyt9.2","ex_name":"Accessing Dictionary Elements","line_number":"2","code":"","comment":""},{"topic_name":"Dictionaries","rdf_id":"pyt9.2","ex_name":"Accessing Dictionary Elements","line_number":"3","code":"print (dict1['Name'])","comment":"printing the value of the key 'Name'"},{"topic_name":"Dictionaries","rdf_id":"pyt9.2","ex_name":"Accessing Dictionary Elements","line_number":"4","code":"print (dict1['Age'])","comment":"printing the value of the key 'Age'"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"1","code":"print ('Hello World!')","comment":"One way to print a string is to enclose the string inside single quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"2","code":"print (\"Hello World!\") ","comment":"Another way to print out a string is to enclose the string inside double quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"3","code":"print ('''Hello World!''')","comment":"One more way to printing out strings is to put it between Three-Single Quotes. This is used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"4","code":"print (\"\"\"Hello World!\"\"\") ","comment":"Strings can also be printed with Three-Double Quotes. Similar to the previous example, this is also used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"1","code":"a = 10","comment":"An integer"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"2","code":"b = 10.20","comment":"A floating point number"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"3","code":"c = \"Harry\"","comment":"A string enclosed in quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"4","code":"d = True","comment":"A Boolean value (True or False)"},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.3","ex_name":"Variable Assignment","line_number":"6","code":"print (a,b,c,d)","comment":"Prints our the values of variables a, b, c and d separating the values by a blank. With the current value of variables it will print 10 10.2 Harry True"},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"1","code":"num1 = 1","comment":"A positive integer '1' is assigned to the variable num1. After this statement, num1 variable is updated with the value '1'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"2","code":"num2 = -100","comment":"A negative integer '-100' is assigned to the variable num2. After this statement, num2 variable is updated with the value '-100'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"3","code":"num3 = 20.30","comment":"A positive float '20.30' is assigned to the variable num3. After this statement, num3 variable is updated with the value '20.30'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"4","code":"num4 = -0.002","comment":"A negative float '-0.002' is assigned to the variable num4. After this statement, num4 variable is updated with the value '-0.002'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"6","code":"print (num1)","comment":"Printing out the variable 'num1'. The resultant output as seen by you will be '1'."},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"1","code":"string1 = \"This is an example Srting\"","comment":"Assigning string type to the variable 'string1'"},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"3","code":"print (string1)","comment":"Prints out the complete string"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"1","code":"list1 = [ 123, 'test' , 0.200, -100, True ]    ","comment":"Defining a list containing 5 elements and assigning it to a variable named list1"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"2","code":"list2 = [ \"apples\", \"oranges\" , \"banana\"]","comment":"Defining a list containing 3 elements and assigning it to a variable named list2"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"4","code":"print (list2)","comment":"Printing out the variable 'list2'"},{"topic_name":"Variables","rdf_id":"pyt1.1","ex_name":"Hello World","line_number":"1","code":"print (\"Hello World!\")","comment":"This is a simple statement which prints out the string 'Hello World!'. Python 3 syntax suggests that everything that needs to be printed out should be enclosed in the round parenthesis '()'."},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"1","code":"print ('Hello World!')","comment":"One way to print a string is to enclose the string inside single quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"2","code":"print (\"Hello World!\") ","comment":"Another way to print out a string is to enclose the string inside double quotation marks"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"3","code":"print ('''Hello World!''')","comment":"One more way to printing out strings is to put it between Three-Single Quotes. This is used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.2","ex_name":"Different Ways to Print","line_number":"4","code":"print (\"\"\"Hello World!\"\"\") ","comment":"Strings can also be printed with Three-Double Quotes. Similar to the previous example, this is also used to print out large strings that typically exceeds more than one line"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"1","code":"x, y, z = 10, 'Harry', True","comment":"Integer '10' is assigned to variable x, the string 'Harry' is assigned to variable y and the boolean value 'True' is assigned to variable z"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"2","code":"a = b = c = d = 10","comment":"Integer value '10' is assigned to variables a,b,c and d simultaneously in just one statement"},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"4","code":"print (z)","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.4","ex_name":"Multiple Variable Assignment","line_number":"5","code":"print (c)","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"1","code":"num1 = 1","comment":"A positive integer '1' is assigned to the variable num1. After this statement, num1 variable is updated with the value '1'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"2","code":"num2 = -100","comment":"A negative integer '-100' is assigned to the variable num2. After this statement, num2 variable is updated with the value '-100'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"3","code":"num3 = 20.30","comment":"A positive float '20.30' is assigned to the variable num3. After this statement, num3 variable is updated with the value '20.30'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"4","code":"num4 = -0.002","comment":"A negative float '-0.002' is assigned to the variable num4. After this statement, num4 variable is updated with the value '-0.002'."},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"5","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.5","ex_name":"Variable type: Numbers","line_number":"6","code":"print (num1)","comment":"Printing out the variable 'num1'. The resultant output as seen by you will be '1'."},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"1","code":"string1 = \"This is an example Srting\"","comment":"Assigning string type to the variable 'string1'"},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.6","ex_name":"Variable type: Strings","line_number":"3","code":"print (string1)","comment":"Prints out the complete string"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"1","code":"list1 = [ 123, 'test' , 0.200, -100, True ]    ","comment":"Defining a list containing 5 elements and assigning it to a variable named list1"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"2","code":"list2 = [ \"apples\", \"oranges\" , \"banana\"]","comment":"Defining a list containing 3 elements and assigning it to a variable named list2"},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"3","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.7","ex_name":"Variable type: Lists","line_number":"4","code":"print (list2)","comment":"Printing out the variable 'list2'"},{"topic_name":"Variables","rdf_id":"pyt1.8","ex_name":"Variable type: Tuples","line_number":"1","code":"tuple1 = ('sample_text', 100 , 5.5, False)","comment":"Defining a tuple with 4 elements and assigning it to the variable 'tuple1'"},{"topic_name":"Variables","rdf_id":"pyt1.8","ex_name":"Variable type: Tuples","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.8","ex_name":"Variable type: Tuples","line_number":"3","code":"print (tuple1)","comment":"Printing the tuple"},{"topic_name":"Variables","rdf_id":"pyt1.9","ex_name":"Variable type: Dictionary","line_number":"1","code":"dictionary1 = {'name': 'harry','age':14, 'gender': 'male'}","comment":"Creating a dictionary (key-value pairs) with 3 key-values and assigning it to the variable dictionary1"},{"topic_name":"Variables","rdf_id":"pyt1.9","ex_name":"Variable type: Dictionary","line_number":"2","code":"","comment":""},{"topic_name":"Variables","rdf_id":"pyt1.9","ex_name":"Variable type: Dictionary","line_number":"3","code":"print (dictionary1)","comment":"printing out the dictionary"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"3","code":"","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"4","code":"print (a + b)","comment":"Adding a and b"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"5","code":"print (a - b)","comment":"Subtracting a and b"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"6","code":"print (a * b)","comment":"Multiplying a and b"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"7","code":"print (a \/ b)","comment":"Dividing a and b"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"8","code":"print (a ** b)","comment":"Performing a exponent b"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"9","code":"print (a % b)","comment":"a modulus b operation"},{"topic_name":"Operators","rdf_id":"pyt2.1","ex_name":"Arithmatic Operations","line_number":"10","code":"print (a\/\/b)","comment":"Floor dividing a and b"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"3","code":"","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"4","code":"print (a == b)","comment":"Is a equal to b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"5","code":"print (a != b)","comment":"Is a not equal to b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"6","code":"print (a > b)","comment":"Is a greater than b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"7","code":"print (a < b)","comment":"Is a less than b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"8","code":"print (a >= b)","comment":"Is a greater than or equal to b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"9","code":"print (a <= b)","comment":"Is a less than or equal to b? Result is a boolean value True or False"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"3","code":"","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"4","code":"a += b","comment":"This operation is equivalent to 'a = a + b'"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"5","code":"a -= b","comment":"This operation is equivalent to 'a = a - b'"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"6","code":"a *= b","comment":"This operation is equivalent to 'a = a * b'"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"7","code":"a \/= b","comment":"This operation is equivalent to 'a = a \/ b'"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"8","code":"a %= b","comment":"This operation is equivalent to 'a = a % b'"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"9","code":"a **= b","comment":"This operation is equivalent to 'a = a ** b' (a exponent b)"},{"topic_name":"Operators","rdf_id":"pyt2.3","ex_name":"Assignment Operators","line_number":"10","code":"a \/\/= b","comment":"This operation is equivalent to 'a = a \/\/ b'"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"1","code":"a = 10101010","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"2","code":"b = 00001111","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"3","code":"","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"4","code":"print (a&b)","comment":"Performs Binary AND Operation"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"5","code":"print (a|b)","comment":"Performs Binary OR Operation"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"6","code":"print (a^b)","comment":"Performs Binary XOR Operation"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"7","code":"print (~a)","comment":"Performs Binary Ones Complement"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"8","code":"print (a>>1)","comment":"Performs Binary Right Shift"},{"topic_name":"Operators","rdf_id":"pyt2.4","ex_name":"Bitwise Operators","line_number":"9","code":"print (a<<1)","comment":"Performs Binary Left Shift"},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"1","code":"a = 10","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"2","code":"b = 5","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"3","code":"","comment":""},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"4","code":"print (a is b)","comment":"This will check if a is equal to b"},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"5","code":"print (a is not b)","comment":"This will check if a is not equal to b"},{"topic_name":"Operators","rdf_id":"pyt2.5","ex_name":"Identity Operators","line_number":"6","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"1","code":"a = 5","comment":"Assigning integer 5 to the variable 'a'"},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"2","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"3","code":"if a == 5:","comment":"Check if the value of a is 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.1","ex_name":"If statement","line_number":"4","code":"    print True","comment":"if the condition is True, print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"2","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"3","code":"if a == 5:","comment":"Check if 'a' is equal to 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"4","code":"    print True","comment":"If yes, print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"5","code":"else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.2","ex_name":"If..Else statement","line_number":"6","code":"    print False","comment":"Else, print 'False'"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"2","code":"b = 2","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"3","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"4","code":"if a == 5:","comment":"First condition: to check if a is equal to 5"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"5","code":"    if b == 2:","comment":"Second Condition: to check if b is equal to 2"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"6","code":"        print True","comment":"If both the conditions are true, then print 'True'"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"7","code":"    else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"8","code":"        print False","comment":"Print False if the inner condition is False"},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"9","code":"else:","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.3","ex_name":"Nested If Statements","line_number":"10","code":"    print False","comment":"Print False if the outer condition is False"},{"topic_name":"Conditionals","rdf_id":"pyt3.4","ex_name":"Single Line If...Else Statement","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.4","ex_name":"Single Line If...Else Statement","line_number":"2","code":"","comment":""},{"topic_name":"Conditionals","rdf_id":"pyt3.4","ex_name":"Single Line If...Else Statement","line_number":"3","code":"print 'True' if a == 5 else 'False'","comment":"If a is equal to 5 then print 'True', else print 'False'. This entire logic can be written in one line if...ese statement."},{"topic_name":"Loops","rdf_id":"pyt4.1","ex_name":"While Loop Statement","line_number":"1","code":"a = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.1","ex_name":"While Loop Statement","line_number":"2","code":"","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.1","ex_name":"While Loop Statement","line_number":"3","code":"while (a < 5):","comment":"Initial value of the variable 'a' is 0. This statement loops till a is less than 5 (till a is equal to 4)"},{"topic_name":"Loops","rdf_id":"pyt4.1","ex_name":"While Loop Statement","line_number":"4","code":"   print 'Number is:', a","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.1","ex_name":"While Loop Statement","line_number":"5","code":"   a = a + 1","comment":"Increment the value of a. This is important step in while loops to avoid infinite looping."},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"1","code":"a = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"2","code":"","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"3","code":"for a in range(0,5):","comment":"This statement loops for 5 times from the value of a = 0 to a = 4"},{"topic_name":"Loops","rdf_id":"pyt4.2","ex_name":"For Loop Statement","line_number":"4","code":"    print (a)","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"1","code":"i = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"2","code":"","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"3","code":"while i < 2:","comment":"Loops from i=0 to i=1 (Outer Loop)"},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"4","code":"   j = 0","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"5","code":"   while j < 2:","comment":"Loops from j=0 to j=1 (Inner Loop)"},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"6","code":"      print (j)","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"7","code":"      j = j + 1","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.3","ex_name":"Nested Loops","line_number":"8","code":"   i = i + 1","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.4","ex_name":"Break Statement","line_number":"1","code":"for letter in 'Python':","comment":"loops for each letter in the word 'Python'"},{"topic_name":"Loops","rdf_id":"pyt4.4","ex_name":"Break Statement","line_number":"2","code":"    if letter == 'h':","comment":"Checks if the current letter is 'h'"},{"topic_name":"Loops","rdf_id":"pyt4.4","ex_name":"Break Statement","line_number":"3","code":"        break","comment":"if yes, then the program breaks out of the loop"},{"topic_name":"Loops","rdf_id":"pyt4.4","ex_name":"Break Statement","line_number":"4","code":"    print 'Current Letter :', letter","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.5","ex_name":"Continue Statement","line_number":"1","code":"for letter in 'Python':","comment":"Loops through each letter in the word Python"},{"topic_name":"Loops","rdf_id":"pyt4.5","ex_name":"Continue Statement","line_number":"2","code":"    if letter == 'h':","comment":"Checks if the current letter is 'h'"},{"topic_name":"Loops","rdf_id":"pyt4.5","ex_name":"Continue Statement","line_number":"3","code":"        continue","comment":"If yes, it continues. Here the 'continue' statement jumps out of the loop imediately and iterates through the next element"},{"topic_name":"Loops","rdf_id":"pyt4.5","ex_name":"Continue Statement","line_number":"4","code":"    print 'Current Letter :', letter","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.6","ex_name":"Pass Statement","line_number":"1","code":"for letter in 'Python': ","comment":"Loops through every letter in the word Python"},{"topic_name":"Loops","rdf_id":"pyt4.6","ex_name":"Pass Statement","line_number":"2","code":"    if letter == 'h':","comment":"checks if the current letter is 'h'"},{"topic_name":"Loops","rdf_id":"pyt4.6","ex_name":"Pass Statement","line_number":"3","code":"        pass","comment":"If yes, it will pass. Here pass does nothing.It can be used when a statement is required syntactically but the program requires no action."},{"topic_name":"Loops","rdf_id":"pyt4.6","ex_name":"Pass Statement","line_number":"4","code":"        print 'This pass statement does nothing'","comment":""},{"topic_name":"Loops","rdf_id":"pyt4.6","ex_name":"Pass Statement","line_number":"5","code":"    print 'Current Letter :', letter","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"1","code":"a = 5","comment":""},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"2","code":"b = 3","comment":""},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"3","code":"","comment":""},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"4","code":"print (a == b)","comment":"Is a equal to b? Result is a boolean value True or False"},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"5","code":"print (a != b)","comment":"Is a not equal to b? Result is a boolean value True or False"},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"6","code":"print (a > b)","comment":"Is a greater than b? Result is a boolean value True or False"},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"7","code":"print (a < b)","comment":"Is a less than b? Result is a boolean value True or False"},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"8","code":"print (a >= b)","comment":"Is a greater than or equal to b? Result is a boolean value True or False"},{"topic_name":"Comparison","rdf_id":"pyt2.2","ex_name":"Comparison Operators","line_number":"9","code":"print (a <= b)","comment":"Is a less than or equal to b? Result is a boolean value True or False"},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"5","code":"              int i;    ","comment":"A variable declaration statement always contains a data type, a variable name and a semicolon. This statement declares an integer variable 'i'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"6","code":"              String sentence;    ","comment":"Type of the variable identifies the kind of data that can be stored in this variable. Type 'String' is used to declare variables holding strings (text \r\nsequences)."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"7","code":"              int a, b;    ","comment":"You can declare several variables of the same type in one statement. Variable names should be separated with a comma. This statement declares two integer variables 'a' and 'b'."},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"1","code":"public class variables1","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"8","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables1_v2","ex_name":"variable declaration","line_number":"9","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"5","code":"              int i = 2;","comment":"Variable initialization is used to declare a variable and immediately assign \r\nan initial value to it. This statement declares an integer variable named 'i' \r\nand assign it with integer 2."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"6","code":"              String sentence = \"I am a camera.\";    ","comment":"String variables are initialized with string literals. Here variable 'sentence' is \r\ninitialized with 'I am a teacher.'."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"7","code":"              int a = 2, b = 3;  ","comment":"Several variables of the same type can be initialized in one statement."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"8","code":"              int i =  2 * 3 + 5; ","comment":"You can initialize a variable with the result of an expression. Here, the \r\ninteger variable 'i' is initialized with value 11."},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"1","code":"public class variables2","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"4","code":"       {","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"9","code":"       }","comment":""},{"topic_name":"Variables","rdf_id":"variables2_v2","ex_name":"variable initialization","line_number":"10","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"1","code":"class HelloWorld {    ","comment":"Java programs consist of classes. This line starts the class 'HelloWorld'. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"2","code":"    public static void main (String[] args) {    ","comment":"The method 'main' starts the execution of Java applications. "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"3","code":"        String s = \"Hello, world!\";    ","comment":"Initialization of the String variable 's'; "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"4","code":"        System.out.println(s);    ","comment":"This statement prints out the value of variable 's' (Hello, World!) to the console window "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"5","code":"    }    ","comment":"end of the method 'main' "},{"topic_name":"Variables","rdf_id":"HelloWorld2_v2","ex_name":"HelloWorld","line_number":"6","code":"}   ","comment":"end of the class 'HelloWorld'"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"1","code":"public class HelloPrinter","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"2","code":"{","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"4","code":"   {","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"5","code":"      System.out.println(\"Hello, World!\");","comment":"Prints \"Hello, World!\" and starts a new line"},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"6","code":"   }","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"7","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"HelloPrinter","ex_name":"Hello Printer","line_number":"8","code":"}","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"1","code":"public class VariableDemo\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"5","code":"      int width = 10; \r\n","comment":"Declares a variable named 'width' and initializes it with integer 10."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"6","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"7","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"8","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"9","code":"      width = 20;\r\n","comment":"Changes width to 20"},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"10","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"11","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"13","code":"      int height = 20;\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"14","code":"      width = height + 10; \r\n","comment":"The right hand side of an assignment can be an expression."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"15","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"16","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"17","code":"","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"18","code":"      width = width + 10; \r\n","comment":"The same variable can occur on both sides of an assignment."},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"19","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"20","code":"      System.out.println(width);      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"21","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"VariableDemo","ex_name":"Variable Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"1","code":"public class PrintTester\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"3","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"4","code":"   {\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"5","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"6","code":"      \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"7","code":"      System.out.println(\"Hello\"); \r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"8","code":"      System.out.println(\"World!\");\r\n","comment":"Prints \"Hello\" in one line and \"World!\" in the next line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"9","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"10","code":"      System.out.print(\"00\"); \r\n","comment":"Prints 00 but doesn't start a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"11","code":"      System.out.println(3 + 4); \r\n","comment":"Prints 7 and starts a new line."},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"12","code":"","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"13","code":"      System.out.println(\"Goodbye\");\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"14","code":"   }\r\n","comment":""},{"topic_name":"Variables","rdf_id":"PrintTester","ex_name":"Print Tester","line_number":"15","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"1","code":"public class MethodDemo","comment":"This example demonstrates method calls."},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"2","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"3","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"4","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"5","code":"      String greeting = \"Hello, World!\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"6","code":"      System.out.println(greeting); ","comment":"greeting is the argument in this call to the println method"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"7","code":"      int numberOfCharacters = greeting.length();","comment":"The length method returns a value"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"8","code":"   ","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"9","code":"      System.out.print(\"numberOfCharacters: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"10","code":"      System.out.println(numberOfCharacters);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"11","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"12","code":"      System.out.print(\"greeting.length(): \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"13","code":"      System.out.println(greeting.length());","comment":"You can use the return value of one method as an argument of another \r\nmethod"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"15","code":"      String river = \"Mississippi\";","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"16","code":"      river = river.replace(\"issipp\", \"our\");","comment":"The replace method has two arguments"},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"17","code":"      System.out.print(\"river: \");","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"18","code":"      System.out.println(river);","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"19","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"20","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"MethodDemo","ex_name":"Method Demo","line_number":"21","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"1","code":"import java.awt.Rectangle;\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"2","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"3","code":"public class ConstructorDemo\r","comment":"This example demonstrates constructors."},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"4","code":"{\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"5","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"7","code":"      System.out.println(new Rectangle(5, 10, 20, 30));\r","comment":"Constructs and prints a rectangle"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"8","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"9","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r","comment":"Constructs a rectangle and saves it in a variable"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"10","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"11","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"12","code":"\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"13","code":"      box = new Rectangle();\r","comment":"The constructor with no arguments"},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"14","code":"      System.out.print(\"box: \");\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"15","code":"      System.out.println(box);\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"16","code":"   }\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"17","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"ConstructorDemo","ex_name":"Constructor Demo","line_number":"18","code":"}\r","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"1","code":"import java.awt.Rectangle;\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"3","code":"public class AccessorMutatorDemo\r\n","comment":"This example demonstrates accessors and mutators."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"4","code":"{\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"5","code":"   public static void main(String[] args)\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"6","code":"   {\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"7","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"8","code":"      System.out.print(\"box: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"9","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"10","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"11","code":"      double width = box.getWidth();\r\n","comment":"getWidth is an accessor method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"12","code":"      System.out.print(\"width: \");\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"13","code":"      System.out.println(width);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"14","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"15","code":"      System.out.print(\"box: \");\r\n","comment":"Calling an accessor doesn't change the object"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"16","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"17","code":"","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"18","code":"      box.translate(15, 25);\r\n","comment":"translate is a mutator method"},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"19","code":"  \r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"20","code":"      System.out.print(\"box: \");\r\n","comment":"Calling a mutator changes the object."},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"21","code":"      System.out.println(box);\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"22","code":"   }\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"23","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"AccessorMutatorDemo","ex_name":"Accessor Mutator Demo","line_number":"24","code":"}\r\n","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"1","code":"import java.awt.Rectangle;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"2","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"3","code":"public class CopyDemo","comment":"This example demonstrates the difference between \r\ncopying numbers and object references."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"4","code":"{","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"5","code":"   public static void main(String[] args)","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"6","code":"   {","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"8","code":"      Rectangle box = new Rectangle(5, 10, 20, 30);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"9","code":"      Rectangle box2 = box;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"10","code":"","comment":"Both variables refer to the same object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"11","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"12","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"13","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"14","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"15","code":"      System.out.println(\"Mutating box2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"16","code":"      box2.translate(15, 25);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"17","code":"","comment":"Both variables refer to the mutated object"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"18","code":"      System.out.print(\"box: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"19","code":"      System.out.println(box);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"20","code":"      System.out.print(\"box2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"21","code":"      System.out.println(box2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"22","code":"","comment":"Declare two number variables and copy the first into \r\nthe second"},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"23","code":"      int luckyNumber = 13; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"24","code":"      int luckyNumber2 = luckyNumber; ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"25","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"26","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"27","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"28","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"29","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"30","code":"      ","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"31","code":"      System.out.println(\"Changing luckyNumber2\");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"32","code":"      luckyNumber2 = 12;","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"33","code":"","comment":"Only the second number changes."},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"34","code":"      System.out.print(\"luckyNumber: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"35","code":"      System.out.println(luckyNumber);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"36","code":"      System.out.print(\"luckyNumber2: \");","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"37","code":"      System.out.println(luckyNumber2);","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"38","code":"   }","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"39","code":"}","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"40","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"41","code":"","comment":""},{"topic_name":"Objects","rdf_id":"CopyDemo","ex_name":"Copy Demo","line_number":"7","code":"","comment":"Declare two object variables and copy the first into the \r\nsecond"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"1","code":"public class CounterDemo\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"3","code":"    public static void main(String[] args)\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"4","code":"    {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"5","code":"        Counter tally = new Counter();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"6","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"7","code":"        tally.click();\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"8","code":"        int result = tally.getValue(); \r","comment":"Sets result to 2"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"9","code":"        System.out.print(\"result: \");\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"10","code":"        System.out.println(result);\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"11","code":"    }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"12","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"13","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"14","code":"public class Counter\r","comment":"This class models a tally counter."},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"15","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"16","code":"   private int value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"17","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"18","code":"   public int getValue()\r","comment":"\/**\r\n     Gets the current value of this counter.\r\n     @return the current value\r\n*\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"19","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"20","code":"      return value;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"21","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"22","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"23","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"24","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"25","code":"      value = value + 1;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"26","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"27","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"28","code":"   public void reset()\r","comment":"\/**\r\n      Resets the value of this counter to 0.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"29","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"30","code":"      value = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"31","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"32","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"CounterDemo","ex_name":"Counter Demo","line_number":"33","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"1","code":"public class BankAccountTester\r","comment":"A class to test the BankAccount class."},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"3","code":"   public static void main(String[] args)\r","comment":"\/**\r\n      Tests the methods of the BankAccount class.\r\n      @param args not used\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"5","code":"      BankAccount harrysChecking = new BankAccount();\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"6","code":"      harrysChecking.deposit(2000);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"7","code":"      harrysChecking.withdraw(500);\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"8","code":"      System.out.println(harrysChecking.getBalance());\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"9","code":"      System.out.println(\"Expected: 1500\");      \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"10","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"11","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"12","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"13","code":"public class BankAccount\r","comment":"\/**\r\n   A bank account has a balance that can be changed by \r\n   deposits and withdrawals.\r\n*\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"14","code":"{  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"15","code":"   private double balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"16","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"17","code":"   public BankAccount()\r","comment":"\/**\r\n      Constructs a bank account with a zero balance.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"18","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"19","code":"      balance = 0;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"21","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"22","code":"   public BankAccount(double initialBalance)\r","comment":"\/**\r\n      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"23","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"24","code":"      balance = initialBalance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"25","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"26","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"27","code":"   public void deposit(double amount)\r","comment":" \/**\r\n      Deposits money into the bank account.\r\n      @param amount the amount to deposit\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"28","code":"   {  \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"29","code":"      balance = balance + amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"30","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"31","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"32","code":"   public void withdraw(double amount)\r","comment":"\/**\r\n      Withdraws money from the bank account.\r\n      @param amount the amount to withdraw\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"33","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"34","code":"      balance = balance - amount;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"35","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"36","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"37","code":"   public double getBalance()\r","comment":" \/**\r\n      Gets the current balance of the bank account.\r\n      @return the current balance\r\n   *\/"},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"38","code":"   {   \r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"39","code":"      return balance;\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"40","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"41","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"BankAccountTester","ex_name":"Bank Account Tester","line_number":"42","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"1","code":"public class Counter\r","comment":"\/**\r\n   This example demonstrates the this reference.\r\n*\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"2","code":"{\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"3","code":"   private int value; \r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"4","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"5","code":"   public Counter(int value) \r","comment":" \/**\r\n      Constructs a counter with a given value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"6","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"7","code":"      this.value = value;\r","comment":"this. resolves the conflict between an instance variable and a local variable with the \r\nsame name"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"8","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"9","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"10","code":"   public Counter()\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"11","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"12","code":"      this(0);\r","comment":"Invokes the Counter(int value) constructor with value = 0\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"13","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"14","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"15","code":"   public void click() \r","comment":" \/**\r\n      Advances the value of this counter by 1.\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"16","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"17","code":"      this.value = this.value + 1;\r","comment":"Using this makes it clear that the instance variable is updated"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"18","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"19","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"20","code":"   public int getPrevious() \r","comment":"\/**\r\n      Gets the previous value of this counter.\r\n      @return the previous value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"21","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"22","code":"      return getValue() - 1;\r","comment":"When you call a method without an object, it is invoked on the this reference, i.e \r\nthis.getValue().\r\n"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"23","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"24","code":"\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"25","code":"   public int getValue()\r","comment":"\/**\r\n      Gets the current value of this counter.\r\n      @return the current value\r\n   *\/"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"26","code":"   {\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"27","code":"      return value;\r","comment":"Or, if you prefer, return this.value;"},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"28","code":"   }\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"29","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"thisReference","ex_name":"This Reference","line_number":"30","code":"}\r","comment":""},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"1","code":"public class Bicycle {    ","comment":"Class definition starts with the access specifier (usually - public), the \r\nreserved word \"class\" and name of the class.   The opening curly \r\nbracket is followed by the body of a class definition."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"2","code":"","comment":"the Bicycle class has three fields    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"3","code":"    private int cadence;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown cadence.  Instance fields should be declared private.  In this \r\ncase the access to the object's data is granted only through the \r\nmethods of the public interface. No unexpected modification of the \r\nobject data is possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"4","code":"    private int gear;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown gear.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"5","code":"    private int speed;    ","comment":"instance field definition. Every object of the class Bicycle will have its \r\nown speed.  Instance fields should be declared private.  In this case \r\nthe access to the object's data is granted only through the methods \r\nof the public interface. No unexpected modification of the object data \r\nis possible."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"6","code":"","comment":"the Bicycle class has one constructor    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"7","code":"    public Bicycle(int startCadence, int startSpeed, int startGear) {    ","comment":"Constructor definition starts with the access specifier (public), name \r\nof the constructor (always the same as the name of the class) and \r\nthe list of parameters (to initialize the instance fields of newly created \r\nobjects)."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"8","code":"        gear = startGear;    ","comment":"instance field gear is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"9","code":"        cadence = startCadence;    ","comment":"instance field cadence is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"10","code":"        speed = startSpeed;    ","comment":"instance field speed is initialized with a certain value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"11","code":"    }    ","comment":"end of the constructor. Whenever a new object of class Bicycle is \r\ncreated using this constructor the sequence of statements between \r\nthe opening and the closing curly brackets is executed."},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"12","code":"","comment":"the Bicycle class has four methods    "},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"13","code":"    public void setCadence(int newValue) {    ","comment":"This method changes the current value of cadence to a newValue  it \r\nis defined as public to provide access to this method from outside of \r\nthe class.  it is defined void, as it does not return any vale  it has \r\nonly one parameter - a new values for cadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"14","code":"        cadence = newValue;    ","comment":"instance field cadence is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"15","code":"    }    ","comment":"end of the method setCadence"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"16","code":"    public void setGear(int newValue) {    ","comment":"This method changes the current value of gear to a newValue  it is \r\ndefined as public to provide access to this method from outside of the \r\nclass.  it is defined void, as it does not return any vale  it has only \r\none parameter - a new values for gear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"17","code":"        gear = newValue;    ","comment":"instance field gear is assigned with a new value"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"18","code":"    }    ","comment":"end of the method setGear"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"19","code":"    public void applyBrake(int decrement) {    ","comment":"This method implements braking.  it is defined as public to provide \r\naccess to this method from outside of the class.  it is defined void, as \r\nit does not return any vale  it has one parameter - a speed \r\ndecrement"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"20","code":"        speed = speed - decrement;    ","comment":"the current value of speed is reduced (the brake is applied)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"21","code":"    }    ","comment":"end of the method applyBrake"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"22","code":"    public void speedUp(int increment) {    ","comment":"This method implements speeding up.  it is defined as public to \r\nprovide access to this method from outside of the class.  it is defined \r\nvoid, as it does not return any vale  it has one parameter - a speed \r\nincremenet"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"23","code":"        speed = speed + increment;    ","comment":"the current value of speed is increased (the bicycle is speeding)"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"24","code":"    }    ","comment":"end of the method speedUp"},{"topic_name":"Classes","rdf_id":"Bicycle_v2","ex_name":"Bicycle","line_number":"25","code":"}  ","comment":"end of the class definition"},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"1","code":"public class Rectangle {    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"2","code":"    private int width;    ","comment":"width is an instance field of class Rectangle . It is declared as integer \r\nto store the width of Rectangle objects.It is declared as private to \r\nrestrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"3","code":"    private int height;    ","comment":"height is another instance field of class Rectangle . It is declared as \r\ninteger to store the height of Rectangle objects.It is declared as \r\nprivate to restrict the direct access from outside the class."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"4","code":"    private Point origin;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"5","code":"    \/\/ four constructors    ","comment":"Each constructor lets you provide initial values for the rectangle's size \r\nand width, using both primitive and reference types.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"6","code":"    public Rectangle() {    ","comment":"This is the first constructor. It has no arguments in it."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"7","code":"        origin = new Point(0, 0);    ","comment":"it invokes the no-argument constructor to create a new Point object \r\ncalled origin. "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"8","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"9","code":"    public Rectangle(Point p) {    ","comment":"this constructor assigns the given point to the origin."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"10","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"11","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"12","code":"    public Rectangle(int w, int h) {    ","comment":"this constructor assigns new point to the origin. Also, it sets the width \r\nand height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"13","code":"        origin = new Point(0, 0);    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"14","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"15","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"16","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"17","code":"    public Rectangle(Point p, int w, int h) {    ","comment":"this constructor assigns the given point to the origin. Also, it sets the \r\nwidth and height of the point to the 'w' and 'h' respectively."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"18","code":"        origin = p;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"19","code":"        width = w;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"20","code":"        height = h;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"21","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"22","code":"    public void move(int x, int y) {    ","comment":"a method for moving the rectangle."},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"23","code":"        origin.x = x;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"24","code":"        origin.y = y;    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"25","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"26","code":"    public int getArea() {    ","comment":"a method for computing the area of the rectangle    "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"27","code":"        return width * height;    ","comment":"This method returns the integer that the expression width*height \r\nevaluates to.  "},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"28","code":"    }    ","comment":""},{"topic_name":"Classes","rdf_id":"Rectangle_v2","ex_name":"Rectangle","line_number":"29","code":"}  ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"1","code":"public class Tester","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"2","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"3","code":"\tpublic static void main(String[] args) {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"4","code":"\t\tCashRegister register = new CashRegister();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"5","code":"\t\tregister.recordPurchase(0.75);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"6","code":"\t\tregister.recordPurchase(1.50);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"7","code":"\t\tregister.enterPayment(2, 0, 5, 0, 0);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"8","code":"\t\tdouble expected = register.giveChange();","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"9","code":"\t}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"10","code":"}","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"11","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"12","code":"public class CashRegister","comment":"\/**   A cash register totals up sales and computes change due.*\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"13","code":"{","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"14","code":"   public static final double QUARTER_VALUE = 0.25;","comment":"creates a constant field for the class using the keyword 'final'."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"15","code":"   public static final double DIME_VALUE = 0.1;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"16","code":"   public static final double NICKEL_VALUE = 0.05;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"17","code":"   public static final double PENNY_VALUE = 0.01;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"18","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"19","code":"   private double purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"20","code":"   private double payment;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"21","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"22","code":"   public CashRegister()","comment":"\/**      Constructs a cash register with no money in it.   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"23","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"24","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"25","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"26","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"27","code":"","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"28","code":"   public void recordPurchase(double amount)","comment":"\/**      Records the purchase price of an item.      @param amount the price of the \r\npurchased item\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"29","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"30","code":"      purchase = purchase + amount;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"31","code":"      Logger.getGlobal().info(\"amount=\" + amount);","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"32","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"33","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"34","code":"   public void enterPayment(int dollars, int quarters, int dimes, int nickels, int pennies) ","comment":"    \/**      Enters the payment received from the customer.      @param dollars the \r\nnumber of dollars in the payment\r\n      @param quarters the number of quarters in the payment\r\n      @param dimes the number of dimes in the payment\r\n      @param nickels the number of nickels in the payment\r\n      @param pennies the number of pennies in the payment\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"35","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"36","code":"      payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE","comment":"constant fields are used to calculate the payment."},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"37","code":"            + nickels * NICKEL_VALUE + pennies * PENNY_VALUE;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"38","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"39","code":"   ","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"40","code":"   public double giveChange()","comment":" \/**      Computes the change due and resets the machine for the next customer.      \r\n@return the change due to the customer\r\n   *\/"},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"41","code":"   {","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"42","code":"      double change = payment - purchase;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"43","code":"      purchase = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"44","code":"      payment = 0;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"45","code":"      return change;","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"46","code":"   }","comment":""},{"topic_name":"Classes","rdf_id":"CashRegisterConstantField","ex_name":"Cash Register Tester (Constant Field)","line_number":"47","code":"}","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"5","code":"                  byte byteNumber = 7;    ","comment":"The type describing a single byte, with range -128 . . . 127"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"6","code":"                  short shortNumber = 1234;    ","comment":"The short integer type, with range -32,768 . . . 32,767"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"7","code":"                  int integerNumber = 1;    ","comment":"The integer type, with range -2,147,483,648 . . . 2,147,483,647"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"8","code":"                  long longNumber = 123456789L;    ","comment":"The long integer type, with range -9,223,372,036,854,775,808 . . . \r\n9,223,372,036,854,775,807. This type is specified by adding \"L\" at the end \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"9","code":"                  float floatNumber = 1.2F;    ","comment":"The single-precision floating-point type, with a range of about\u00c2\u00b110^38 and \r\nabout 7 significant decimal digits. This type is specified by adding \"F\" at \r\nthe \r\nend \r\nof the number."},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"10","code":"                  double doubleNumber = 1.496;    ","comment":"The double-precision floating-point type, with a range of about \u00c2\u00b110^308 and \r\nabout 15 significant decimal digits"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"11","code":"                  boolean b = true;    ","comment":"The type with the two truth values false and true"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"12","code":"                  char myChar = 'X';         ","comment":"The character type, representing code units in the Unicode encoding scheme"},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"1","code":"public class PrimitiveDataTypes","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"2","code":"{","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"4","code":"       {","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"13","code":"       }","comment":""},{"topic_name":"Primitive Data Types","rdf_id":"PrimitiveDataTypes_v2","ex_name":"Primitive Data Types","line_number":"14","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"8","code":"     ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"9","code":"  } ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"10","code":"}","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"1","code":"public class ConstantExample{ ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"2","code":"  public static void main(String[] arg) { ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"3","code":"    final int FEET_PER_YARD = 3;          ","comment":"Using the final keyword to declare a variable. The final keyword specifies that the value of a variable is final and cannot be changed. By convention, we use all-uppercase for constants.  Here, FEET_PER_YARD is declared as a constant integer, 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"4","code":"    final double MM_PER_INCH = 25.4;   ","comment":"MM_PER_INCH is declared as a constant double, 25.4."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"5","code":" ","comment":""},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"6","code":"    System.out.println(FEET_PER_YARD); ","comment":"Prints 3."},{"topic_name":"Constants","rdf_id":"Constants_v2","ex_name":"Constants","line_number":"7","code":"    System.out.println(MM_PER_INCH); ","comment":"Prints 25.4."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"2","code":"  public static void main(String args[]) {    ","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"3","code":"    System.out.println(Math.E);    ","comment":"E is the base of the natural logarithms. You can directly use this constant from the \r\nMath class without any declaration. The print out is \"2.718281828459045\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"4","code":"    System.out.println(Math.PI);    ","comment":"PI is the ratio of the circumference of a circle to its diameter. The print out is \r\n\"3.141592653589793\"."},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"5","code":"  }","comment":""},{"topic_name":"Constants","rdf_id":"constant_v2","ex_name":"Constant2","line_number":"6","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"1","code":"class ArithmeticDemo {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"2","code":"     public static void main (String[] args){    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"3","code":"          int result = 1 + 2;     ","comment":"The variable result is initialized with integer 3  "},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"4","code":"          System.out.println(result);    ","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"5","code":"          result = result - 1;    ","comment":"You can use the same variable in both sides of the assignment. In this case, the new value of the variable will depend on its previous value.Here the new value of variable 'result' will be its old value subtracted by 1. Its old value was 3, hence its new value is 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"6","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"7","code":"          result = result * 2;     ","comment":"The new value of variable 'result' is the old value of 'result' multiplied by 2. So, it is 2 by 2. So, it is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"8","code":"          System.out.println(result);    ","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"9","code":"          result = result \/ 2;     ","comment":"The variable 'result' is assigned to value 2, since 4\/2 = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"10","code":"          System.out.println(result);    ","comment":"Prints 2."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"11","code":"          result = result + 8;     ","comment":"result = 2 + 8 = 10"},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"12","code":"          result = result % 3;     ","comment":"Mod operator ('%') finds the division remainder. Here we try to find the remainder of the old value of 'result', when it is divided by 3. Its old value is equal to 10. When we divide 10 by 3, the remainder is 1. This will be the result of '10 % 3'. Hence, the new value of variable 'result' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"13","code":"          System.out.println(result);    ","comment":"Prints 1."},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"14","code":"     }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"arithmetic_v2","ex_name":"arithmetic operations","line_number":"15","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"1","code":"public class Increment     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"2","code":"   public static void main( String args[] )    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"3","code":"   {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"4","code":"      int c = 5;","comment":"The initial value of variable 'c' is 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"5","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"6","code":"      System.out.println( c++ );     ","comment":"Prints 5, and then increments the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"7","code":"      System.out.println( c );       ","comment":"Prints 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"8","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"9","code":"      c = 5;     ","comment":"Variable 'c' is equal to 5 again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"10","code":"      System.out.println( c );      ","comment":"Prints 5."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"11","code":"      System.out.println( ++c );     ","comment":"This line first increments the value of variable 'c' and then prints it, hence it'll print 6."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"12","code":"      System.out.println( c );      ","comment":"Prints 6  again."},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"13","code":"   }     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"increment_v2","ex_name":"increment","line_number":"14","code":"}   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"5","code":"                  int i = Math.abs(-9);  ","comment":"The Math class in the java.lang package provides methods and \r\nconstants for doing more advanced mathematical computation. \r\nThe methods in the Math class are all static, so you call them \r\ndirectly from the class. To use these objects from another class, \r\nyou prefix the class name. abs() method returns the absolute \r\nvalue of its input argument. Here, i = 9."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"6","code":"                  double j = Math.ceil(4.00001) ;    ","comment":"ceil() method returns the smallest integer that is greater than or \r\nequal to its input argument. The ceiling of every integer is equal to \r\nthe integer itself. Here, j = 5.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"7","code":"                  j = Math.ceil(-4.00001) ;  ","comment":"j = -4.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"9","code":"                  double pow = Math.pow(3,2);","comment":"The pow() method contains two input parameters. They are \r\nrespectively the base and the exponent values. pow = 9.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"8","code":"                  double squareroot = Math.sqrt( 900.0 );   ","comment":"The sqrt() method returns the correctly rounded positive square root \r\nof a double value. Here, squareroot = 30.0."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"1","code":"public class MathFunction","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"16","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"17","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"13","code":"                  double round = Math.round(19.90);","comment":"The round() method returns the closest integer to the input \r\nargument. Here, the value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"14","code":"                  round = Math.round(19.50);","comment":"The value of round is equal to 20 ."},{"topic_name":"Arithmetic Operations","rdf_id":"MathFunction_v2","ex_name":"Math Functions","line_number":"15","code":"                  round = Math.round(19.45);","comment":"The value of round is equal to 19 ."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"1","code":"public class Operator{    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"2","code":"  public static void main(String[] argv) {    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"3","code":"    int a = 3 % 2;    ","comment":"% is a remainder operator. Here, the variable \"a\" equals to the remainder after a division by 2. a = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"4","code":"    int b = 11 % 3;    ","comment":"Variable b equals to the remainder after division by 3. b = 2."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"5","code":"    int c = 7 % -3;    ","comment":"Variable c equals to the remainder after the division by -3. c = 1."},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"6","code":"","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"7","code":"    System.out.println(a);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"8","code":"    System.out.println(b);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"9","code":"    System.out.println(c);    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"10","code":"  }    ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"OperatorExample_v2","ex_name":"Operator","line_number":"11","code":"}  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"1","code":"public class Increment\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"2","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"3","code":"   public static void main( String args[] )\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"4","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"5","code":"   {\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"6","code":"\t      int c = 4;\r\n","comment":"The initial value of variable 'c' is equal to 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"7","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"8","code":"\t      System.out.println( c-- );\r\n","comment":"Prints 4, and then decrements the value of variable 'c' by 1."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"9","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"10","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"11","code":"\t      c = 4;\r\n","comment":"The value of variable 'c' is equal to 4 again."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"12","code":"\t      System.out.println( c );\r\n","comment":"Prints 4."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"13","code":"\t      System.out.println( --c );\r\n","comment":"This line first decrements the value of variable 'c' and then prints it. Hence, it'll print 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"14","code":"\t      System.out.println( c );\r\n","comment":"Prints 3."},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"15","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"16","code":"   }\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"17","code":"\t\r\n","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"Decrement","ex_name":"Decrement","line_number":"18","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"1","code":"public class Main\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"2","code":"   public static void main( String args[] )\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"3","code":"   {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"4","code":"         int sum = 1;","comment":"The initial value of variable 'sum' is equal to 1."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"5","code":"         sum += 9;","comment":"This is a shortcut for 'sum = sum + 9'. So, the operator '+=' adds 9 to the current value of variable sum.  "},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"6","code":"         System.out.println( sum );","comment":"Prints 10."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"7","code":"\t     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"8","code":"         sum = 1;","comment":"Variable 'sum' is equal to 1 again."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"9","code":"         sum *= 9;","comment":"This is a shortcut for 'sum = sum * 9'. So, the operator '*=' multiplies the value of variable 'sum' by 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"10","code":"         System.out.println( sum ); ","comment":"Prints 9."},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"11","code":"  ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"12","code":"   }   ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"13","code":"\t","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"CompoundAssignment","ex_name":"Combining Assignment and Arithmetic","line_number":"14","code":"}","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"5","code":"                 double d = 5.4;     ","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"6","code":"                 float f = (float) d;    ","comment":"A double value cannot be directly assigned to a float variable. Type casting is required to do so. Type Casting refers to changing an entity of one datatype into another. Here, we change a double datatype to float."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"7","code":"                 int i = (int) d;  ","comment":"To assign a double or float value to a variable of an integer type you need to typecast this value. This will truncate the floating part of the double value."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"8","code":"                 byte b = (byte) i;  ","comment":"To convert from a longer integer type to a shorter integer type a typecasting is required. As in all cases above, some information can be lost. For example, here if the value of variable i is not between -128 and 127, the resulting value of variable b will be different from the expected."},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"1","code":"public class TypeCasting","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"2","code":"{","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"4","code":"       {","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"10","code":"       }","comment":""},{"topic_name":"Arithmetic Operations","rdf_id":"TypeCasting_v2","ex_name":"Type Casting","line_number":"11","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"7","code":"                 String string3 = \"Hello world!\";  ","comment":"You can also create a String object simply by writing the desired text within double quotes. The string is a series of characters in your code that is enclosed in double quotes.  "},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"6","code":"                 String string2 = new String(\"Hello world!\");\r\n","comment":"You can create a String object by using the \"new\" keyword to create it.\r\n"},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"5","code":"                 String string1;","comment":"This line creates a String object and it has not yet been initialized. The default value is null."},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"1","code":"public class CreateString","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"9","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"CreateString_v2","ex_name":"Creating String","line_number":"10","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"5","code":"                  String a = \"Java is great.\";    ","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"6","code":"                  String b = a.substring(5,7);  ","comment":"substring() method returns the sub-string between its input parameters. The \r\nfirst parameter is the start position (here equals to 5) and the second input \r\nparameter is the end position (here equals to 7). Here the string variable b is \r\ninitialized with \"is\".  "},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"1","code":"public class substring","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"17","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"18","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"substring_v2","ex_name":"Substring","line_number":"16","code":"                  b = \"Java is great.\".substring(5,7); ","comment":"substring() method can be called by a string literal as well. Again, the string \r\nvariable b is initialized with \"is\"."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"5","code":"                    String s = \"This is course IS17!\";      ","comment":"A string variable s is initialized with a string literal (This is course IS17!)."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"6","code":"                    int length = s.length();  ","comment":"The method length() returns the number of characters in the input string. Here the variable length is initialized with 20.  \r\n\r\n"},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"1","code":"public class StringLength","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"7","code":"       }","comment":"Closing bracket for the main method. It's a good idea to keep annotation of the closing brackets."},{"topic_name":"Strings","rdf_id":"string_length_v2","ex_name":"String Length","line_number":"8","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"1","code":"public class StringExample {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"2","code":"  public static void main(String[] a) {\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"3","code":"    String s = null;\r\n","comment":"The literal null is an object reference value that does not refer to anything."},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"4","code":"    String s1 = \"1 \" + \"2\";\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"5","code":"    String s2 = s1 + \" = 3\";\r\n\r\n","comment":"You can compose long string literals by using the plus sign to concatenate two string literals.\r\n"},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"7","code":"    System.out.println(s);","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"8","code":"    System.out.println(s1);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"9","code":"    System.out.println(s2);\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"10","code":"  }\r\n\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringExample","ex_name":"DEPRECATED_StringExample","line_number":"6","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"1","code":"public class Main\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"2","code":"{\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"3","code":"       public static void main(String[] args)\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"4","code":"       {\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"5","code":"             String s = \"Strings are immutable\";\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"6","code":"             char result = s.charAt(8);\r\n","comment":"The method 'charAt()' returns a char at the specified index. "},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"7","code":"             System.out.println(result);\r\n","comment":"Prints a."},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"8","code":"       }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsCharAt","ex_name":"Strings (charAt)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"1","code":"public class Main{ \r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"3","code":"   public static void main(String args[]){\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"4","code":"      int x =Integer.parseInt(\"9\");\r\n","comment":"The method 'java.lang.Integer.parseInt(String s)' parses the string argument s as a signed decimal integer. The variable x is initialized by value 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"5","code":"      double y = Double.parseDouble(\"5\");\r\n","comment":"The method 'java.lang.Double.parseDouble(String s)' returns a new double initialized to the value represented by the parsing of specified String as a double. Here the variable y is initialized by 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"6","code":"      System.out.println(x);\r\n","comment":"Prints 9."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"7","code":"      System.out.println(y);\r\n","comment":"Prints 5.0."},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"8","code":"   }\r\n","comment":""},{"topic_name":"Strings","rdf_id":"StringsParse","ex_name":"Strings (parse)","line_number":"9","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"1","code":"public class Test {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"2","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"3","code":"   public static void main(String args[]) {","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"4","code":"      String str1 = new String(\"HELLO WORLD\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"5","code":"      String str2 = new String(\"hello world\");","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"6","code":"      boolean isEqual;","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"7","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"8","code":"      isEqual = str1.equals( str2 );","comment":"The equals() method evaluates if the two strings (str1 and str2) are equal. This comparison is case-sensitive. Here it returns 'false'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"9","code":"      System.out.println(isEqual);","comment":"Prints false."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"10","code":"","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"11","code":"      isEqual = str1.equalsIgnoreCase( Str2 );","comment":"The equalsIgnoreCase() method evaluates if the two strings (str1 and str2) are equal without differentiating between upper and lower-case letters (the comparison is case-insensitive). Here it returns 'true'."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"12","code":"      System.out.println(isEqual);","comment":"Prints true."},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"13","code":"     ","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"14","code":"   }","comment":""},{"topic_name":"Strings","rdf_id":"StringsEqualsIgnoreCase","ex_name":"Strings (equalsIgnoreCase)","line_number":"15","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"2","code":"{","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"4","code":"       {","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"8","code":"             replaceSample = \"replacing Character Sequence\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"9","code":"             newString = replaceSample.replace(\"re\", \"RE\");","comment":"Here, \"re\" will be replaced with \"RE\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"10","code":"             System.out.println(newString );","comment":"prints \"REplacing Character Sequence\""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"11","code":"       }","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"12","code":"}","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"5","code":"             String replaceSample = \"replacing one char from String\";","comment":""},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"6","code":"             String newString = replaceSample.replace('r', 't');","comment":"the method 'replace(oldChar,newChar)' returns a new string resulting from \r\nreplacing all occurrences of oldChar in this string with newChar.  \r\nHere, \"r\" will be replaced with \"t\"."},{"topic_name":"Strings","rdf_id":"StringsReplace","ex_name":"Strings (replace)","line_number":"7","code":"             System.out.println(newString );","comment":"prints \"teplacing one chat ftom Stting\""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Strings","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"5","code":"                    int n=0;","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"6","code":"                    if (n % 2 == 0)    ","comment":"if n is an even integer (the remainder of n divide by 2 is equal to 0), the \r\nstatement is true. the following code block will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"7","code":"                    {       System.out.println(\"the number is Even.\");     }    ","comment":"It prints out \"the number is Even.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"8","code":"                    else    ","comment":"if the statement (the remainder of n divided by 2 is equal to 0) is false, \r\nthe following code block after \"else\" will be executed."},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"9","code":"                    {       System.out.println(\"the number is Odd.\");      }  ","comment":"It prints out \"the number is Odd.\""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"1","code":"public class ifelse2","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"2","code":"{","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"4","code":"       {","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"10","code":"       }","comment":""},{"topic_name":"If-Else","rdf_id":"ifelse2_v2","ex_name":"If Else","line_number":"11","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"1","code":"public class Tester {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"2","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"3","code":"      Integer i1 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"5","code":"      Integer i3 = new Integer(5);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"7","code":"      System.out.println(i1 == i3);","comment":"Here, i1 and i3 refer to the different objects, so 'false' is printed"},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"8","code":"      System.out.println(i1.equals(i3));      ","comment":"the method 'equals()' tests whether the contents of the two objects is \r\nthe same. Here, 'true' is printed."},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"9","code":"  }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"10","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"4","code":"      Integer i2 = i1;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"ObjectEquality ","ex_name":"Object Equality","line_number":"6","code":"      System.out.println(i1 == i2);","comment":"the operator '==' tests whether the references refer to the same \r\nobject. Here, both i1 and i2 refer to the same object, so 'true' is \r\nprinted"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"1","code":"public class Main","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"2","code":"{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"3","code":"\tpublic static void main(String[] args)","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"4","code":"\t{","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"5","code":"\t\tString str1 = null;","comment":"when object reference is initialized with 'null', it refers to no object at \r\nall. It is common to use the 'null' value to indicate that a value has \r\nnever been set."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"6","code":"\t\tSystem.out.println(str1 == null);","comment":"prints true;"},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"7","code":"\t\tSystem.out.println(str1 == \"\");","comment":"'null' reference is not the same as the empty string. So, it prints false."},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"8","code":"    }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"testNull","ex_name":"Testing for null","line_number":"9","code":"}","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"8","code":"     if (++value % 2 != 0 || ++count < limit) {","comment":"The operator || (OR) makes the expression true if any or both sides are true. In this case the comparison \r\n\"++value % 2 != 0\" gives true (++ increments value \r\nto 9 and \"% 2\" computes the rest of 9\/2), thus all the \r\nexpression is evaluated to true."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_9","ex_name":"Using ||","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"4","code":"     int value = 8;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"5","code":"     int count = 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"6","code":"     int limit = 11;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"7","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"8","code":"     if (++value % 2 == 0 && ++count < limit) {","comment":"The && (AND) operator is used to indicate that both conditions (at the right and left sides of the &&) must be met. \r\nIncremental operator \"++\" put before the variable makes the increment before the rest of \r\noperations is computed. The modulus operator (\"%\") computes the rest of the integer quotient \r\nbetween \"value\" and 2. Here it is testing if value is an even number. Since \"++\" is put before, \r\nthe value is incremented to 9 and then the modulus 2 gives the value 1, and the condition is \r\nnot met."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"9","code":"       System.out.println(\"here\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"10","code":"       System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"11","code":"       System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"12","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"13","code":"     System.out.println(\"there\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"14","code":"     System.out.println(value);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"15","code":"     System.out.println(count);","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"16","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_8","ex_name":"Using &&","line_number":"17","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"3","code":"   public static void main(String[] arg) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"4","code":"     int a = 0;","comment":"An int variables is declared and initialized with the value 0."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"5","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"6","code":"     if (a == 0) {","comment":"The if statement allows execute statements only when a specific condition is met. In this \r\ncase the statement below will be executed only \r\nif the value of a is equal to 0. Note that the \r\ncomparison operator is double equal \"==\"."},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"7","code":"       System.out.println(\"a is 0\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"8","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"9","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_5","ex_name":"If Statement","line_number":"10","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"1","code":"    If (age>= 21)\r","comment":"The greater than or the equality operators can be combined to produce an operator as follows >=. This is the \"greater than or equal to\" operator."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"2","code":"        System.out.println(\"you are over 21 years old!\");\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"3","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"4","code":"    If (age!= 21)\r","comment":"The Inequality Operator is used to compare two values for inequality."},{"topic_name":"Boolean Expressions","rdf_id":"logical_operators_v2","ex_name":"logical operators","line_number":"5","code":"        System.out.println(\"you are not 21 years old!\");","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"2","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"3","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"4","code":"     int x= 10;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"5","code":"     int y= 12;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"6","code":"     int w= 13;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"7","code":"     int z= 3;","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"8","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"9","code":"     if (x < w || y > z) {","comment":"This If statement checks two conditions, one with less than and one \r\nwith greater than comparison. The conditions are connected with OR \r\noperator. It \r\nmeans that the whole complex condition will be true if *at least* one \r\nof its \r\nparts is true (i.e., first, second, or both). "},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"10","code":"       y++;","comment":"The value of y gets incremented, i.e., increased by one"},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"11","code":"     }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"12","code":"   }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"13","code":" ","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"JavaTutorial_4_2_2","ex_name":"If with complex condition","line_number":"14","code":" }","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"1","code":"public class Main{\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"2","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"3","code":"   public static void main(String args[]) {\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"4","code":"      String str1 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"5","code":"      String str2 = str1;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"6","code":"      String str3 = \"Hello World\";\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"7","code":"      \r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"8","code":"      boolean isEqual;\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"9","code":"      isEqual = str1.equals( str2 );\r","comment":"the method 'equals()' tests whether two strings are equal to each other. Here, both str1 and str2 \r\nare equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"10","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"11","code":"\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"12","code":"      isEqual= str1.equals( str3 );\r","comment":"Again, str1 and str3 are equal to 'Hello World', so isEqual is 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"13","code":"      System.out.println(isEqual);\r","comment":"prints 'true'"},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"14","code":"   }\r","comment":""},{"topic_name":"Boolean Expressions","rdf_id":"stringEquals","ex_name":"String Equals","line_number":"15","code":"}","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"1","code":"\/\/Sun Java Tutorial, Learning the Java Language>>Language Basics>>The switch Statement\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"2","code":"\/\/SwitchDemo\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"3","code":"class SwitchDemo {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"4","code":"    public static void main(String[] args) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"5","code":"\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"6","code":"        int month = 8;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"7","code":"        switch (month) {\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"8","code":"            case 1:  System.out.println(\"January\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"9","code":"            case 2:  System.out.println(\"February\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"10","code":"            case 3:  System.out.println(\"March\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"11","code":"            case 4:  System.out.println(\"April\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"12","code":"            case 5:  System.out.println(\"May\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"13","code":"            case 6:  System.out.println(\"June\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"14","code":"            case 7:  System.out.println(\"July\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"15","code":"            case 8:  System.out.println(\"August\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"16","code":"            case 9:  System.out.println(\"September\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"17","code":"            case 10: System.out.println(\"October\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"18","code":"            case 11: System.out.println(\"November\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"19","code":"            case 12: System.out.println(\"December\"); break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"20","code":"            default: System.out.println(\"Invalid month.\");break;\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"21","code":"        }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"22","code":"    }\r","comment":""},{"topic_name":"Switch","rdf_id":"Switch","ex_name":"DEPRECATED_switch","line_number":"23","code":"}","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"1","code":"class WhileDemo {    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"2","code":"     public static void main(String[] args){    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"3","code":"          int count = 1;    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"4","code":"          while (count < 11) {    \r\n","comment":"while statement allows you to execute a piece of code several times, while a certain condition is true. In this case we execute a block of statements while 'count' is less than 11\r\nwhile-loop is a loop with pre-condition, which means it checks for the condition before going into the loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"5","code":"               System.out.println(\"Count is: \" + count);    \r\n","comment":"on every step of the loop we print the current value of 'count'...\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"6","code":"               count++;    \r\n","comment":"and then we increment the value of 'count' by 1.Hence, this loop  will execute 10 times and it will print 1,2,3....9,10.On the last step after it prints 10, and increase 'count' to 11 the 'while'-condition becomes false, since 'count' is not lees then 11 any more. And the loop stops.\r\n\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"7","code":"          }    \r\n","comment":"end of the while-loop\r\n"},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"8","code":"     }    \r\n","comment":""},{"topic_name":"Loops While","rdf_id":"while_v2","ex_name":"While","line_number":"9","code":"}  \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"1","code":"class DoWhileDemo { \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"2","code":"     public static void main(String[] args){ \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"3","code":"          int count = 1; \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"4","code":"          do { \r\n","comment":"do-while loops allows you to execute a piece of code several times, while a certain condition is true.do-while loop is the post-condition loop, which means, it first executes the body of the loop and then checks for the terminating condition. Hence, do-while loop will always execute at least once.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"5","code":"               System.out.println(\"Count is: \" + count); \r\n","comment":"prints the current value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"6","code":"               count++; \r\n","comment":"increments the value of 'count'\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"7","code":"          } while (count < 11); \r\n","comment":"the body of the loop executes while count < 11.In our case it executes 10 times and prints 1,2,3,...9,10.\r\nOn the last step it prints 10, increments count to 11 and stops since 11 is no longer less than 11.\r\n"},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"8","code":"     } \r\n","comment":""},{"topic_name":"Loops Do-While","rdf_id":"do_while_v2","ex_name":"dowhile","line_number":"9","code":"}\r\n","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"1","code":"class ForDemo {","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"2","code":"     public static void main(String[] args){","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"3","code":"          for(int i=1; i<11; i++){","comment":"The for statement provides a compact way to iterate over a range of values. There are three things included inside the parentheses, initialization, \r\ntermination and increment\/decrement. The initialization \r\nexpression initializes the loop; it's executed once, as the loop begins. \r\nWhen the termination expression evaluates to false, the loop terminates. \r\nThe increment expression is invoked after each iteration through the loop. \r\nHere, an integer i is initialized to 1. After each iteration, i increases 1. \r\nOnce i reaches 11, the termination expression becomes false. The loop \r\nterminates."},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"4","code":"               System.out.println(\"Count is: \" + i);","comment":"Inside the for loop, each iteration will print a line which consists the string literal \"Count is: \" and the value of i. The print out will be 10 lines, the first \r\nis \"Count is: 1\", the second line is \"Count is: 2\", and so forth until the the last line that which is \"Count is: 10\""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"5","code":"          }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"6","code":"     }","comment":""},{"topic_name":"Loops For","rdf_id":"for1_v2","ex_name":"For Loop","line_number":"7","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"5","code":"            for(int i=0;i<7;i++) { ","comment":"the first loop starts with i = 0. i increases 1 for each iteration and terminates while i reaches 7."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"6","code":"                for(int j=7;j>i;j--) { ","comment":"the second for loop will be completely executed for each repetition of the enclosing for loop, and each time the enclosing loop variable 'i' will \r\nhave an incremented value. The first time, 'i' will be 0 and 'j' will start form 7 and will decrement in each step down to 1 (condition is j>i), \r\nrepeating a total of 7 times. Next time, 'i' will be 1 and this inner for loop will repeat from j=7 to j=2 (6 times)."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"7","code":"                     System.out.print(\"*\"); ","comment":"this line prints out an '*' and no new line character. Each loop will print a number of consecutive '*'."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"8","code":"                } ","comment":"end of the second for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"9","code":"                System.out.println(); ","comment":"this line prints a blank line."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"10","code":"            }","comment":"end of the first for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"1","code":"public class nested_loops","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops_v2","ex_name":"Nested Loops","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"5","code":"                       for ( int rowNumber = 1;  rowNumber <= 10;  rowNumber++ ) { ","comment":"the outer for loop starts with rowNumber equals to 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"6","code":"                          for ( int N = 1;  N <= 10;  N++ ) { ","comment":"the inner for loop starts with N equals to 1. 1. It increases 1 for each iteration and terminates when it reaches 10."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"7","code":"                                System.out.print( N * rowNumber + \" \");   ","comment":"it prints out the result of the multiplication consecutively and adding a space character. As the loop goes, the printed line will have a series of 10 numbers \r\ncorresponding to the multiplication of each 'j' from 1 to 10 to the current value of i. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"8","code":"                          } ","comment":"end of the inner for loop."},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"9","code":"                          System.out.println(); ","comment":"this line prints a blank line to separate the series of numbers"},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"10","code":"                       }","comment":"end of the outer for loop. The first line of the print out is '1 2 3 4 5 6 7 8 9 10', the second line is '2 4 6 8 10 12 14 16 18 20', and so on and so forth. "},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"1","code":"public class nested_loops2","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"2","code":"{","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"4","code":"       {","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"nested_loops2_v2","ex_name":"Nested Loops2","line_number":"12","code":"}","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"1","code":" public class MainClass {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"2","code":"   public static void main(String[] args) {","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"3","code":"     long limit = 20L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"4","code":"     long factorial = 1L;","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"5","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"6","code":"     for (long i = 1L; i <= limit; i++) {","comment":"This for loop will iterate 20 times computing the factorial values of the 20 first integers."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"7","code":"       factorial = 1L;","comment":"\"Factorial\" is defined as long type (note the \"L\") because factorial numbers easily reach high values."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"8","code":" ","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"9","code":"       for (long factor = 2; factor <= i; factor++) {","comment":"This nested for loop compute the factorial of \"i\"."},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"10","code":"         factorial *= factor;","comment":"The *= operator assign the same value multiplying by another value. This line can be written as:\r\nfactorial = factorial*factor;"},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"11","code":"       }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"12","code":"       System.out.println(i + \"! is \" + factorial);","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"13","code":"     }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"14","code":"   }","comment":""},{"topic_name":"Nested Loops","rdf_id":"JavaTutorial_4_6_12","ex_name":"Nested For Loop","line_number":"15","code":" }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"5","code":"                  double[] A =  new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles.  "},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"6","code":"                ","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"7","code":"                  int B[] = {50,20,45,82,25,63};   ","comment":"You may or may not define the size of the array in the declaration time."},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"1","code":"public class array_declaration","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"11","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"array_declaration_v2","ex_name":"Array Declaration","line_number":"12","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"6","code":"                    int[] a = new int[5];    ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"7","code":"                    for (int i = 0; i < 5; i++)    ","comment":"use a loop to set all the values of an array to 0.  "},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"8","code":"                       a[i] = 0;  ","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"2","code":"public class using_array","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"3","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"4","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"5","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"9","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"10","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"using_array_v2","ex_name":"Using an Array1","line_number":"1","code":"","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"5","code":"                  double[] data = new double[10];    ","comment":"declares an array of type double, allocates memory for 10 doubles  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"6","code":"                  for (int i = 0; i < data.length; i++) { ","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"8","code":"                        System.out.println(data[i]);","comment":"prints data[i] and starts a new line."},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"1","code":"public class use_array","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"2","code":"{","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"4","code":"       {","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"10","code":"       }","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"11","code":"}","comment":""},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"7","code":"                        data[i] = i * i;  ","comment":"data array contains accordingly: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, but not 100  "},{"topic_name":"Arrays","rdf_id":"use_array_v2","ex_name":"Using an Array2","line_number":"9","code":"                  }","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"1","code":"public class EnhancedForLoopDemo\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"2","code":"{\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"3","code":"   public static void main(String[] args)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"4","code":"   {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"5","code":"      int[] values = new int[10];\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"6","code":"\r","comment":"In this loop, we need the index value, so we can't use an enhanced for loop."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"7","code":"       for (int i = 0; i < values.length; i++)\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"8","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"9","code":"         values[i] = i * i;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"10","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"11","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"12","code":"      int total = 0;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"13","code":"      for (int element : values)\r","comment":"In this loop, we don't need the index value. The enhanced for loop simplifies the code."},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"14","code":"      {\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"15","code":"         System.out.println(element);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"16","code":"         total = total + element;\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"17","code":"      }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"18","code":"\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"19","code":"      System.out.println(\"Sum: \" + total);\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"20","code":"   }\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"21","code":"}\r","comment":""},{"topic_name":"Arrays","rdf_id":"EnhancedForLoopDemo","ex_name":"Enhanced For Loop Demo","line_number":"22","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"5","code":"                  ArrayList<Integer> intlist = new ArrayList<Integer>();        ","comment":"It creates a list of Integer objects.  "},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"6","code":"                ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"7","code":"                  ArrayList<Number> numlist = new ArrayList<Number>();        ","comment":"numlist is created to hold Number objects."},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"1","code":"public class arraylist1","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"2","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"3","code":"       public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"4","code":"       {","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist1_v2","ex_name":"Create ArrayList","line_number":"8","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"1","code":"import java.util.ArrayList;    ","comment":"import ArrayList class from java libraries  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"2","code":"class ArrayListDemo {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"3","code":"       public static void main(String args[]) {    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"4","code":"       ArrayList<String> AL = new ArrayList<String>();    ","comment":"The type ArrayList<String> denotes an array list of strings. The angle brackets around the \r\nString type tell you that String is a type parameter. You can replace String with any other \r\nclass and get a different array list type."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"5","code":"       AL.add(\"C\");    ","comment":"add an element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"6","code":"       AL.add(\"A\");    ","comment":"add another element to the array list, AL.  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"7","code":"       AL.add(\"E\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"8","code":"       AL.add(\"B\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"9","code":"       AL.add(\"D\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"10","code":"       AL.add(\"F\");    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"11","code":"       AL.add(1, \"A2\");    ","comment":"Insert A2 at index 1  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"12","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 7  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"13","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, A, E, B, D, F]   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"14","code":"       AL.remove(\"F\");    ","comment":"Remove elements \"F\" from the array list   "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"15","code":"       AL.remove(2);    ","comment":"Removes the element at index 2  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"16","code":"       System.out.println(\"Size of AL: \" + AL.size());     ","comment":"Size of AL: 5  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"17","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, E, B, D]  "},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"20","code":"      }    ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"21","code":"}  ","comment":""},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"18","code":"       AL.set(2, \"H\");    ","comment":"the set(2, \"H\") method replaces the element at index 2 with \"H\". Here, \"E\" is replaced by \"H\"."},{"topic_name":"ArrayList","rdf_id":"arraylist2_v2","ex_name":"ArrayList Demo","line_number":"19","code":"       System.out.println(\"Contents of AL: \" + AL);     ","comment":"Contents of AL: [C, A2, H, B, D]  "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"1","code":"import java.util.ArrayList;","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"2","code":"public class ArrayListTester","comment":"\/**   This program tests the ArrayList class.*\/"},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"3","code":"{","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"4","code":"   public static void main(String[] args)","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"5","code":"   {","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"6","code":"      ArrayList<BankAccount> accounts = new ArrayList<BankAccount>();","comment":"This line creates an arrayList of BankAccount objects."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"7","code":"      accounts.add(new BankAccount(1001));","comment":"creates a BankAccount object with account number 1001 and adds that to the list."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"8","code":"      accounts.add(new BankAccount(1015));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"9","code":"      accounts.add(new BankAccount(1729));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"10","code":"      accounts.add(1, new BankAccount(1008));","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"11","code":"      accounts.remove(0);","comment":"The remove(i) method removes the element at index i, here remove(0) removes \r\nthe BankAccount object with account number 1001."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"12","code":"      System.out.println(\"Size: \" + accounts.size());","comment":"The size() method returns the list size, here the size is 3. "},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"13","code":"      BankAccount first = accounts.get(0);","comment":"The method get(i) returns the object at index i in the list. Here, get(0) returns the \r\nfirst element in the list at index 0."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"14","code":"      System.out.println(\"First account number: \" ","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"15","code":"            + first.getAccountNumber());","comment":"gets the account number of the first element in the list and prints 1008."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"16","code":"      BankAccount last = accounts.get(accounts.size() - 1);","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"17","code":"      System.out.println(\"Last account number: \" ","comment":"gets the account number of the last element in the list and prints 1729."},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"18","code":"            + last.getAccountNumber());","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"19","code":"   }","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"20","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"ArrayListTester","ex_name":"ArrayList Tester","line_number":"21","code":"}","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"3","code":"public class GradeBook\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"4","code":"{\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"5","code":"   private ArrayList<Double> scores;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"7","code":"   public GradeBook()\r","comment":"\/**\r\n      Constructs a gradebook with no scores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"9","code":"      scores = new ArrayList<Double>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"12","code":"   public void addScore(double score)\r","comment":"\/**\r\n      Adds a score to this gradebook.\r\n      @param score the score to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"14","code":"      scores.add(score);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"16","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"17","code":"   public double sum()\r","comment":" \/**\r\n      Computes the sum of the scores in this \r\ngradebook.\r\n      @return the sum of the scores\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"20","code":"      for (double element : scores)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"22","code":"         total = total + element;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"26","code":"      \r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"27","code":"   public double minimum()\r","comment":"\/**\r\n      Gets the minimum score in this gradebook.\r\n      @return the minimum score, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"29","code":"      if (scores.size() == 0) return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"30","code":"      double smallest = scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"31","code":"      for (int i = 1; i < scores.size(); i++)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"32","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"33","code":"         if (scores.get(i) < smallest)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"34","code":"         {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"35","code":"            smallest = scores.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"36","code":"         }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"37","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"38","code":"      return smallest;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"39","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"40","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"41","code":"    public double finalScore() \r","comment":"\/**\r\n      Gets the final score for this gradebook.\r\n      @return the sum of the scores, with the lowest \r\nscore dropped if \r\n      there are at least two scores, or 0 if there are no \r\nscores.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"42","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"43","code":"      if (scores.size() == 0)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"44","code":"         return 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"45","code":"      else if (scores.size() == 1)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"46","code":"         return scores.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"47","code":"      else\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"48","code":"         return sum() - minimum();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"49","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"50","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"GradeBook","ex_name":"Grade Book","line_number":"51","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"1","code":"import java.util.ArrayList;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"2","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"3","code":"public class Bank\r","comment":"\/**\r\n   This bank contains a collection of bank accounts.\r\n*\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"4","code":"{   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"5","code":"   private ArrayList<BankAccount> accounts;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"6","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"7","code":"   public Bank()\r","comment":"\/**\r\n      Constructs a bank with no bank accounts.\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"8","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"9","code":"      accounts = new ArrayList<BankAccount>();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"10","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"11","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"12","code":"   public void addAccount(BankAccount a)\r","comment":"\/**\r\n      Adds an account to this bank.\r\n      @param a the account to add\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"13","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"14","code":"      accounts.add(a);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"15","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"16","code":"   \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"17","code":"   public double getTotalBalance()\r","comment":"\/**\r\n      Gets the sum of the balances of all accounts in this bank.\r\n      @return the sum of the balances\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"18","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"19","code":"      double total = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"20","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"21","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"22","code":"         total = total + a.getBalance();\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"23","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"24","code":"      return total;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"25","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"26","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"27","code":"   public int countBalancesAtLeast(double atLeast)\r","comment":"\/**\r\n      Counts the number of bank accounts whose balance is at\r\n      least a given value.\r\n      @param atLeast the balance required to count an account\r\n      @return the number of accounts having least the given balance\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"28","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"29","code":"      int matches = 0;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"30","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"31","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"32","code":"         if (a.getBalance() >= atLeast) matches++; \r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"33","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"34","code":"      return matches;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"35","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"36","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"37","code":"   public BankAccount find(int accountNumber)\r","comment":" \/**\r\n      Finds a bank account with a given number.\r\n      @param accountNumber the number to find\r\n      @return the account with the given number, or null if there\r\n      is no such account\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"38","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"39","code":"      for (BankAccount a : accounts)\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"40","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"41","code":"         if (a.getAccountNumber() == accountNumber) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"42","code":"            return a;\r","comment":"Found a match"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"43","code":"      } \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"44","code":"      return null; \r","comment":"No match in the entire array list"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"45","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"46","code":"\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"47","code":"   public BankAccount getMaximum()\r","comment":"\/**\r\n      Gets the bank account with the largest balance.\r\n      @return the account with the largest balance, or null if the\r\n      bank has no accounts\r\n   *\/"},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"48","code":"   {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"49","code":"      if (accounts.size() == 0) return null;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"50","code":"      BankAccount largestYet = accounts.get(0);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"51","code":"      for (int i = 1; i < accounts.size(); i++) \r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"52","code":"      {\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"53","code":"         BankAccount a = accounts.get(i);\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"54","code":"         if (a.getBalance() > largestYet.getBalance())\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"55","code":"            largestYet = a;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"56","code":"      }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"57","code":"      return largestYet;\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"58","code":"   }\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"59","code":"}\r","comment":""},{"topic_name":"ArrayList","rdf_id":"Bank","ex_name":"Bank","line_number":"60","code":"}\r","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"1","code":"import java.util.ArrayList; ","comment":"this line imports the ArrayList class from java.util \r\npackage."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"2","code":"public class Wrapper{ ","comment":"This example shows how to store sequence of \r\nnumbers in the ArrayList. To store sequences \r\nof numbers in an array list, you must turn \r\nthem into objects by using \r\nwrapper classes. There are wrapper classes \r\nfor all eight primitive types. The \r\nwrapper \r\nclass names start with uppercase letters, and \r\nthat two of them differ from the \r\nnames of the corresponding primitive type: \r\nInteger and Character. Each wrapper class \r\nobject contains a value of the \r\ncorresponding primitive type. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"3","code":"    public static void main(String argv[]){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"4","code":"    ArrayList<Integer> AL = new ArrayList<Integer>(); ","comment":"Declares an ArrayList AL to store Integer \r\nobjects. "},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"5","code":"    AL.add(new Integer(1)); ","comment":"Here, an object of the class Integer that \r\ncontains a value of type int is created and \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"6","code":"    AL.add(2); ","comment":"Conversion between primitive types and the \r\ncorresponding wrapper classes is automatic. \r\nThis process is called 'auto-boxing'. \r\nHere, 2 is automatically converted to the \r\nwrapper class Integer that contains 2 \r\nand then the reference of the wrapper class is \r\nadded to the list."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"7","code":"    for(int i=0; i < AL.size();i ++){ ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"8","code":"        int x = AL.get(i); ","comment":"Wrapper objects are also automatically \r\nunboxed to primitive types. This conversion is \r\ncalled 'unboxing'."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"9","code":"        System.out.println(x); ","comment":"prints the element at index i."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"10","code":"    } ","comment":"by the end of the for loop, '1' and '2' are printed \r\nin the first and second line respectively."},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"11","code":"   } ","comment":""},{"topic_name":"Wrapper Classes","rdf_id":"wrapper_class_v2","ex_name":"Wrapper Classes","line_number":"12","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"1","code":"public class Test2Darray2 { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"3","code":"    int[][] multD = new int[9][]; ","comment":"this line creates a two-dimensional array with 9 rows and a variable number   of columns for each row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"4","code":"    multD[0] = new int[21]; ","comment":"The first row is given 21 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"5","code":"    multD[1] = new int[5000]; ","comment":"The second row is given 5000 columns."},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"6","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"create_2d_array_v2","ex_name":"Create 2D Array","line_number":"7","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"1","code":"public class Test2Darray { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"2","code":"  public static void main(String args[]) { ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"3","code":"    int[][] multiD = {       { 1, 2, 3, 4 },        { 5, 6, 7 }    }; ","comment":"A two dimensional array of int values is initialized."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"4","code":"    System.out.println(\"The element at [0][2] is \" + multiD[0][2]); ","comment":"the printout is \"The element at [0][2] is 3\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"5","code":"  } ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"use_2darray_v2","ex_name":"Use 2D Array","line_number":"6","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"1","code":"public class MainClass {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"2","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"3","code":"    int sum = 0;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"4","code":"    int[][] nums = new int[3][5];","comment":"A multidimensional array of int is created (2 dimensions: 3 rows and 5 columns). nums[0] is \r\nthe first row. nums[0][0] is the first \r\nelement of the first \r\nrow."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"5","code":"    for (int i = 0; i < 3; i++)","comment":"This for has only one statement inside: another for. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"6","code":"      for (int j = 0; j < 5; j++)","comment":"This for has only one statement inside. No braces {} are necessary."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"7","code":"        nums[i][j] = (i + 1) * (j + 1);","comment":"The array is filled with values row by row."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"8","code":"    for (int x[] : nums) {","comment":"Another way to iterate inside the array. Now using for-each, each round take a complete row \r\nof the array \"nums\" and references it \r\nas the array \"x\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"9","code":"      for (int y : x) {","comment":"Each round takes a value of the array \"x\" in the int variable \"y\"."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"10","code":"        System.out.println(\"Value is: \" + y);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"11","code":"        sum += y;","comment":"The value of 'y' is added to the value of 'sum' and then the new value is stored in the sum."},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"12","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"13","code":"    }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"14","code":"    System.out.println(\"Summation: \" + sum);","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"15","code":"  }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"JavaTutorial_4_7_7","ex_name":"Multidimensional Array Iteration","line_number":"16","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"1","code":"public class TicTacToe","comment":"\/**   A 3 x 3 tic-tac-toe board.*\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"2","code":"{","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"3","code":"   private String[][] board;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"4","code":"   private static final int ROWS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"5","code":"   private static final int COLUMNS = 3;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"6","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"7","code":"   public TicTacToe()","comment":"\/**      Constructs an empty board.   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"8","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"9","code":"      board = new String[ROWS][COLUMNS];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"10","code":"      for (int i = 0; i < ROWS; i++)","comment":"Fill with spaces"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"11","code":"         for (int j = 0; j < COLUMNS; j++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"12","code":"            board[i][j] = \" \";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"13","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"14","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"15","code":"   public void set(int i, int j, String player)","comment":"\/**      Sets a field in the board. The field \r\nmust be unoccupied.\r\n      @param i the row index \r\n      @param j the column index \r\n      @param player the player (\"x\" or \"o\")\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"16","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"17","code":"      if (board[i][j].equals(\" \"))","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"18","code":"         board[i][j] = player;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"19","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"20","code":"","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"21","code":"   public String toString()","comment":"\/**      Creates a string representation of the \r\nboard, such as \r\n      |x  o|\r\n      |  x |\r\n      |   o|\r\n\r\n      @return the string representation\r\n   *\/"},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"22","code":"   {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"23","code":"      String r = \"\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"24","code":"      for (int i = 0; i < ROWS; i++)","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"25","code":"      {","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"26","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"27","code":"         for (int j = 0; j < COLUMNS; j++)         ","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"28","code":"            r = r + board[i][j];","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"29","code":"         r = r + \"|\";","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"30","code":"      }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"31","code":"      return r;","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"32","code":"   }","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"33","code":"}","comment":""},{"topic_name":"Two-dimensional Arrays","rdf_id":"TicTacToe","ex_name":"Tic-Tac-Toe","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"1","code":"interface SimpleInterface{     ","comment":"declare an interface  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"2","code":"  public void sayHello();      ","comment":"sayHello() method is declared as public.   "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"3","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"4","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"5","code":"public class JavaInterfaceExample implements SimpleInterface{    ","comment":"Use the keyword \"implements\" to implement an \r\ninterface.  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"6","code":"     ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"7","code":"  public void sayHello(){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"8","code":"    System.out.println(\"Hello IS17!\");    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"9","code":"  }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"10","code":"      ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"11","code":"  public static void main(String args[]){    ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"12","code":"    JavaInterfaceExample javaInterfaceExample = new JavaInterfaceExample();    ","comment":"create an object of the class  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"13","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"14","code":"    javaInterfaceExample.sayHello();    ","comment":"invoke sayHello() method which is declared in \r\nSimpleInterface interface.the output is \"Hello \r\nIS17!\"  "},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"15","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"16","code":"  }    ","comment":"end of the main() method"},{"topic_name":"Interfaces","rdf_id":"jeg_interface1_v2","ex_name":"Interface","line_number":"17","code":"}    ","comment":"end of the JavaInterfaceExample  class"},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"1","code":"public interface Listener {    ","comment":"declare the interface Listener.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"2","code":"    double PI = 3.14149;     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"3","code":"    void listen();     ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"4","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"5","code":"public interface Runnable {    ","comment":"declare the interface Runnable.  "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"6","code":"    int PERIOD = 10;    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"7","code":"    void run();    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"8","code":"}    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"9","code":"  ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"10","code":"public class MultiInterfaces implements Listener, Runnable {    ","comment":"A class can extend only one other class, while it can implement numbers of interfaces.   "},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"11","code":"    public void listen() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"12","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"13","code":"    public void run() {    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"14","code":"    }    ","comment":""},{"topic_name":"Interfaces","rdf_id":"imple_multi_v2","ex_name":"MultiInterfaces","line_number":"15","code":"}  ","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"2","code":"  double getMeasure();","comment":"\/**      Computes the measure of the object.      \r\n@return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"5","code":"public class BankAccount implements Measurable {","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"6","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"7","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"8","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a \r\ngiven balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"9","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"10","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"11","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"12","code":"      return balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"13","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"14","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"15","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"16","code":"public class DataSet{","comment":"\/**   Computes the average of a set of data \r\nvalues.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"17","code":"   private double sum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"18","code":"   private Measurable maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"19","code":"   private int count;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"20","code":"   public DataSet(){","comment":"\/**      Constructs an empty data set.   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"21","code":"      sum = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"22","code":"      count = 0;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"23","code":"      maximum = null;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"24","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"25","code":"   public void add(Measurable x){","comment":"\/**      Adds a data value to the data set.      \r\n@param x a data value\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"26","code":"      sum = sum + x.getMeasure();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"27","code":"      if (count == 0 || maximum.getMeasure() < x.getMeasure())","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"28","code":"         maximum = x;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"29","code":"      count++;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"30","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"31","code":"   public Measurable getMaximum(){","comment":"\/**      Gets the largest of the added data.      \r\n@return the maximum or 0 if no data has \r\nbeen \r\nadded\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"32","code":"      return maximum;","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"34","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"36","code":"public class DataSetTester{","comment":"\/**   This program tests the DataSet class.*\/"},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"37","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"38","code":"      DataSet bankData = new DataSet();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"39","code":"      bankData.add(new BankAccount(0));","comment":"New BankAccount object is automatically \r\nconverted to the interface 'Measurable' that \r\nit implements and is added to the \r\n'bankData'.Variable 'maximum' in 'bankData' \r\nis 0."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"40","code":"      bankData.add(new BankAccount(10000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' changes to 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"41","code":"      bankData.add(new BankAccount(2000));","comment":"Another object of type BankAccount is added \r\nto 'bankData'. Variable 'maximum' in \r\n'bankData' remains as 10000."},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"42","code":"      Measurable max = bankData.getMaximum();","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"43","code":"      System.out.println(\"Highest balance: \" + max.getMeasure());","comment":"prints \"Highest balance: 10000\""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"44","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"Measure","ex_name":"Measure ","line_number":"45","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"1","code":"public interface Measurable{","comment":"\/**   Describes any class whose objects can be measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"2","code":"   double getMeasure();\t","comment":"\/**      Computes the measure of the object.      @return the \r\nmeasure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"3","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"4","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"5","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"6","code":"public class BankAccount implements Measurable {","comment":"\/**   A bank account has a balance *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"7","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"8","code":"   private double balance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"9","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"10","code":"   public BankAccount(double initialBalance){","comment":"\/**      Constructs a bank account with a given balance.\r\n      @param initialBalance the initial balance\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"11","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"12","code":"      balance = initialBalance;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"13","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"14","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"15","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"16","code":"   public double getMeasure(){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"17","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"18","code":"      return balance+10;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"19","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"20","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"21","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"22","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"23","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"24","code":"public class Coin implements Measurable","comment":"\/**   A coin with a monetary value.*\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"25","code":"{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"26","code":"   private double value;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"27","code":"   private String name;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"28","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"29","code":"   public Coin(double aValue, String aName) ","comment":"\/**      Constructs a coin.      @param aValue the monetary \r\nvalue of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"30","code":"   { ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"31","code":"      value = aValue; ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"32","code":"      name = aName;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"33","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"34","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"35","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"36","code":"   public double getMeasure() ","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"37","code":"   {","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"38","code":"      return value + 0.5;","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"39","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"40","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"41","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"42","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"43","code":"public class DataSetTester{","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"44","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"45","code":"   public static void main(String[] args){","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"46","code":"      Measurable meas;","comment":"It is possible to define a variable of type interface. Here, any \r\nobject that implements \r\nthe Measurable interface can be assigned to \r\n'meas'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"47","code":"      meas = new BankAccount(2000);","comment":"Variable 'meas' is initialized with an instance of BankAccount with \r\n2000 balance."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"48","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in BankAccount, thus prints '2010'."},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"49","code":"      meas = new Coin(0.1,\"dime\");","comment":"Variable 'meas' is initialized with an instance of Coin with 0.1 \r\nvalue. Again, since Coin \r\nimplements the Measurable interface, it can \r\nbe directly assigned to 'meas' that has the \r\ntype 'Measurable'. "},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"50","code":"      System.out.println( meas.getMeasure());","comment":"calls getMeasure() in Coin, thus prints '0.6'"},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"51","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"52","code":"   }","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"53","code":"\t","comment":""},{"topic_name":"Interfaces","rdf_id":"InterfacePolymorphism","ex_name":"Interface Polymorphism","line_number":"54","code":"}","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"1","code":"public interface Measurable{\r\n","comment":"\/**   Describes any class whose objects can \r\nbe measured.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"2","code":"     double getMeasure(); \t\r\n","comment":"\/**      Computes the measure of the object.\r\n      @return the measure\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"3","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"4","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"5","code":"public class Coin implements Measurable{\r\n","comment":"\/**   A coin with a monetary value.\r\n*\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"6","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"7","code":"   private double value;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"8","code":"   private String name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"9","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"10","code":"   public Coin(double aValue, String aName){\r\n","comment":"\/**      Constructs a coin.\r\n      @param aValue the monetary value of \r\nthe coin\r\n      @param aName the name of the coin\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"11","code":"      value = aValue;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"12","code":"      name = aName;\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"13","code":"   }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"14","code":"\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"15","code":"   public double getMeasure() {\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"16","code":"      return value + 0.5;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"17","code":"  }\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"18","code":"","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"19","code":"   public String getName(){\r\n","comment":"\/**      Gets the coin name.\r\n      @return the name\r\n   *\/"},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"20","code":"      return name;\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"21","code":"   }\t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"22","code":"}\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"23","code":"    \r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"24","code":"public class DataSetTester{\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"25","code":"   public static void main(String[] args){\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"26","code":"      Measurable meas = new Coin(0.1,\"dime\");\r\n","comment":"A class type can be converted to interface type, \r\nprovided the class implements the interface."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"27","code":"      System.out.println( meas.getMeasure());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"28","code":"      Coin coin =  (Coin) meas.getMeasure();\r\n","comment":"explicit casting is required to convert from an \r\ninterface type to a class type."},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"29","code":"      System.out.println(coin.getName());\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"30","code":"  } \t\r\n","comment":""},{"topic_name":"Interfaces","rdf_id":"interfaceClassConversion","ex_name":"Converting between Class and Interface Types","line_number":"31","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"1","code":"public class Animal {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"2","code":"    public String moveMethod() {    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"3","code":"        return \"Unspecified\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"4","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"5","code":"}    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"7","code":"public class Bird extends Animal {    ","comment":"Bird class is a child class (a subclass) of class Animal.  "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"8","code":"    public String moveMethod() {    ","comment":"Subclasses can override methods of their superclass to provide their own implementation of a particular piece of functionality. The overriding method should have the same signature (return type, method name, list of parameters), as does the overridden method.Now objects of class Bird and objects of a more general class Animal will behave differently when reporting their moveMethod()    "},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"9","code":"        return \"Fly\";    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"10","code":"    }    ","comment":""},{"topic_name":"Inheritance","rdf_id":"override_v2","ex_name":"Override","line_number":"11","code":"}  ","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"1","code":"public class Pet {\r\n","comment":"The class Pet has some code implementing 3 methods: speak(), \r\njump() and walk()"},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"2","code":"    public void speak(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"3","code":"        System.out.println(\"speaking!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"4","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"5","code":"\tpublic void jump(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"6","code":"        System.out.println(\"jumping!\");\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"7","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"8","code":"    public void walk(){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"9","code":"        System.out.println(\"walking!\");\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"10","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"11","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"13","code":"public class Dog extends Pet {\r\n","comment":"The class Dog extends Pet. This means it inherits all code \r\nimplemented in class Pet. In general we refer to inheritance as a \r\nClass1 extends a ClassB, where ClassA is called \r\n\"super class\" and ClassB is called \"sub class\". In this example, \r\nPet is the super class and \r\nDog is the sub class."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"15","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"17","code":"public class SimpleInheritance {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"18","code":"    public static void main(String args[]){\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"19","code":"        Dog myDog = new Dog();\r\n","comment":"An object of class Dog is created."},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"20","code":"        myDog.speak();\r\n","comment":"Even when Dog class has no methods by its own, it inherits the \r\nmethods of the superclass Pet. This line prints \"speaking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"21","code":"        myDog.walk();\r\n","comment":"Method walk() is inherited from class Pet. This line prints \"walking!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"22","code":"        myDog.jump();\r\n","comment":"Method jump() is inherited from class Pet. This line prints \r\n\"jumping!\""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"23","code":"    }\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"simple_inheritance_1","ex_name":"Simple Inheritance","line_number":"24","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"1","code":"class Employee {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"2","code":"  public void work() {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"3","code":"    System.out.println(\"I am an employee.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"4","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"7","code":"class Manager extends Employee {","comment":"Manager class inherits all the properties of Employee class"},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"8","code":"  public void work() {","comment":"The sub class (in his case Manager is subclass of Employee) can change the way it behave by \r\noverriding methods. The method \r\nwork() is override here making Manager objects give a different \r\nresponse than Employee objects. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"9","code":"    System.out.println(\"I am a manager.\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"10","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"12","code":"  public void manage() {","comment":"This method is new in class Manager. Employee objects don't have it."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"13","code":"    System.out.println(\"Managing ...\");","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"14","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"15","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"16","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"17","code":"public class PolymorphismTest {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"18","code":"  public static void main(String[] args) {","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"19","code":"    Employee employee = new Manager();    ","comment":"Create an object of the Manager class. The reference employee is declared as Employee class, \r\nbut the object is finally created \r\nas \r\nManager. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"20","code":"    System.out.println(employee.getClass().getName());    ","comment":"This line prints out the class name of the employee object. Here, it prints Manager."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"23","code":"    Manager manager = (Manager) employee;","comment":"This line will solve the last line problem. Cast the employee object to Manager class will make \r\nmanager reference be treated as a Manager object in all cases. "},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"24","code":"    manager.work();","comment":"This line prints out \"I am a manager.\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"25","code":"    manager.manage();","comment":"This line prints out \"Managing ...\""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"26","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"27","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"21","code":"    employee.work();","comment":"Although employee object is declared as being from Employee class, it is in fact a Manager \r\nobject. This makes the object to use the override method and print \"I am a Manager.\" The \r\nprocess goes as follows: i) the employee object is treated as being from the class Employee, ii) \r\nthe work() method is found in the class Employee, but has been override by the real class the \r\nobject belongs to (Manager), and iii) then method work is called in its override version."},{"topic_name":"Inheritance","rdf_id":"poly_v2","ex_name":"polymorphism","line_number":"22","code":"    employee.manage();","comment":"This gives an error. The employee object is declared as Employee (even when is initialized as a \r\nManager), and Employee class does not have the method manage(). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"1","code":"public class SuperClass { \r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"2","code":"    public void whoAmI(){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"4","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"5","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"6","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"7","code":"public class SubClass extends SuperClass{\r","comment":"Class SubClass inherits from SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"8","code":"    public void whoAmI(){\r","comment":"The method whoAmI() is override, making objects in the sub class do a different \r\nthing than objects in the super class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"10","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"11","code":"}\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"12","code":"\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"13","code":"public class InheritanceAndPolymorphism {\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"14","code":"    public static void main(String[] args){\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"15","code":"        SuperClass theObject = new SubClass(); \r","comment":"An object is created: theObject. It is declared as being in the class SuperClass. \r\nHowever it is created as SubClass (see the right side of the statement: new \r\nSubClass()). "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"16","code":"        theObject.whoAmI();\r","comment":"theObject is treated as being from the SuperClass, however, the method is \r\noverride and it prints \"I am an object of the sub class\"."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"17","code":"    }\r","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_1","ex_name":"Inheritance and Polymorphism","line_number":"18","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"1","code":"public class SuperClass{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"2","code":"    public void whoAmI(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"3","code":"        System.out.println(\"I am an object of the super class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"7","code":"public class SubClass extends SuperClass{","comment":"This is a sub class of SuperClass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"8","code":"    public void whoAmI(){","comment":"The method whoAmI() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"9","code":"        System.out.println(\"I am an object of the sub class\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"13","code":"public class CastingClassesTester {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"14","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"15","code":"        SuperClass aSuperObject = new SuperClass();","comment":"the object aSuperObject belongs to the SuperClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"16","code":"        SubClass aSubObject = new SubClass();","comment":"the object aSubObject belongs to the SubClass class"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"17","code":"        aSuperObject.whoAmI();","comment":"Prints \"I am an object of the super class\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"18","code":"        ((SuperClass)aSubObject).whoAmI();","comment":"The object aSubObject is casted to SuperClass. However it still \r\nbelongs to the SubClass and calling the method whoAmI() will \r\nuse the override method and prints \"I am an object of the sub \r\nclass\""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"19","code":"        ((SubClass)aSuperObject).whoAmI();","comment":"This gives an error: an object from a super class can not be casted \r\nto the sub class, unless it was really created as an object \r\nof the subclass"},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"20","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_casting_1","ex_name":"Casting sub and super class","line_number":"21","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"1","code":"public class Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"2","code":"    public void speak(){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"3","code":"        System.out.println(\"\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"4","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"5","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"6","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"7","code":"public class Dog extends Pet {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"8","code":"    public void speak(){","comment":"method speak() is override"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"9","code":"        System.out.println(\"woof! woof!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"10","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"11","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"12","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"13","code":"public class Cat extends Pet{","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"14","code":"    public void speak(){","comment":"method speak() is override."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"15","code":"        System.out.println(\"meow!\");","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"16","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"17","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"18","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"19","code":"public class InheritanceAndPolymorphism2 {","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"20","code":"    public static void main(String args[]){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"21","code":"        Pet[] myPets = new Pet[3];","comment":"an array of objects Pet is created"},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"22","code":"        myPets[0] = new Dog();","comment":"first object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"23","code":"        myPets[1] = new Cat();","comment":"second object in the array is created as a Cat."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"24","code":"        myPets[2] = new Dog();","comment":"third object in the array is created as a Dog."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"25","code":"        whoTheyAre(myPets);","comment":"the method whoTheyAre() is called passing the array myPets as a parameter."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"26","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"27","code":"\t","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"28","code":"    public static void whoTheyAre(Pet[] pets){","comment":"the method receives an array of objects of class Pet. Since Pet is superclass \r\nof Dog and Cat, Dog and Cat objets are also \r\nconsider as Pet objects."},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"29","code":"        for(int i=0;i<pets.length;i++){","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"30","code":"            pets[i].speak();","comment":"each object is accessed and the method speak is called. All objects in the \r\narray \"pets\" are treated as objects of the class \r\nPet, however, they can be from any of the subclasses of Pet. \r\nDepending on which class is the object (Dog, Cat, or Pet), the corresponding \r\nversion of speak() will be called. In this specific \r\nexample, the program will output: \r\nwoof! woof!\r\nmeow!\r\nwoof! woof!\r\n "},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"31","code":"        }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"32","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_polymorphism_2","ex_name":"A Dog is also a Pet","line_number":"33","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"1","code":"public class Container {\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"2","code":"\tprivate int capacity; \r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"3","code":"\t\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"4","code":"\tpublic Container(int capacity){\r\n","comment":"The Container class creates a constructor which asks for an int parameter. This \r\nmeans that for creating a Container object, we need to specify the capacity. \r\nThus, the null constructor Container() is \"deactivate\" in the class : we can not \r\ncreate Container objects by doing just \"new Container()\", we need to specify the \r\ncapacity.  "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"5","code":"\t\tthis.capacity = capacity;\r\n","comment":"the operator this refers to the object which is being built. In this case is used to \r\ndifferentiate the capacity attribute of the object (this.capacity) from the \r\nparameter \r\ncapacity of the constructor (avoid to write something like capacity = capacity.)"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"6","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"7","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"8","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"9","code":"public class PaperBox extends Container {\r\n","comment":"PaperBox class is a subclass of Container"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"10","code":"\tpublic PaperBox(int capacity){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"11","code":"\t\tsuper(capacity);\r\n","comment":"Since the super class Container does not have a null constructor, we need to \r\nexplicitly call its constructor, using the reference super(). Here super() refers to \r\nthe \r\nconstructor Container(int capacity) in class Container."},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"12","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"13","code":"}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"14","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"15","code":"public class GallonPlasticBottle extends Container {\r\n","comment":"GallonPlasticBottle class is a subclass of Container and is aimed to create objects \r\nrepresenting plastic bottles of 1 gallon capacity"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"16","code":"\tpublic GallonPlasticBottle(){\r\n","comment":"This is the constructor of the class. "},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"17","code":"\t\tsuper(1);\r\n","comment":"Here we need to call the super class constructor, and since GallonPlasticBottle will \r\ndefine objects of 1 gallon capacity, the value 1 is passed"},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"18","code":"\t}\r\n","comment":""},{"topic_name":"Inheritance","rdf_id":"inheritance_constructors_1","ex_name":"Inheritance and Constructors 1","line_number":"19","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"1","code":"public class Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"2","code":"    public int capacity; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"3","code":"    public Container(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"4","code":"    \tthis.capacity = capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"5","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"6","code":"    public boolean equals(Object anObject) {\t\t","comment":"the equals() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to test \r\nwhether two Container objects have equal \r\nstate (capacity)."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"7","code":"    \tContainer container = (Container) anObject;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"8","code":"\t\treturn this.capacity == container.capacity;","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"9","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"10","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"11","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"12","code":"public class PaperBox extends Container {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"13","code":"    public PaperBox(int capacity){","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"14","code":"        super(capacity);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"15","code":"    }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"16","code":"    public String toString() {","comment":"the toString() method is one of the common methods among all Objects in Java. \r\nHere, we \r\noverride it to \r\nprint the state of the paperbox. The \r\nsuper.toString() \r\ncalls the implementation of the toString() \r\nmethod in \r\nthe Container. Container does not override \r\nthis \r\nmethod so the original toString() method in \r\nthe Object \r\nclass will be called."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"17","code":"\t\treturn super.toString() + \"[capacity=\" + this.capacity + \"]\"; ","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"18","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"19","code":"    public boolean equals(Object anObject) {\t\t","comment":"a call to equals() in PaperBox will invoke  equals() in super class Container. "},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"20","code":"\t\treturn super.equals(anObject);","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"21","code":"\t}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"22","code":"}","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"23","code":"","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"24","code":"public class Tester {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"25","code":"  public static void main(String args[]) {","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"26","code":"    Container c1 = new PaperBox(2);","comment":"creates an object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"27","code":"    Container c2 = new PaperBox(2);","comment":"creates another object of PaperBox with capacity of 2 gallons."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"28","code":"    System.out.println(c1.equals(c2));","comment":"the equals() method in PaperBox class is called. Since both c1 and c2 have same \r\ncapacity, it returns 'true' and thus prints \r\n'true'."},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"29","code":"    System.out.println(\"c1: \"+c1.toString());","comment":"the toString() method in PaperBox is called. An example of the print is 'c1: \r\nPaperBox@5e8fce95[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"30","code":"    System.out.println(\"c2: \"+c2.toString());","comment":"An example of the print is 'c2: PaperBox@3343c8b3[capacity=2]'\r\n"},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"31","code":"  }","comment":""},{"topic_name":"Inheritance","rdf_id":"OverridingObjectMethods","ex_name":"Overriding Object Methods","line_number":"32","code":"}","comment":""}]